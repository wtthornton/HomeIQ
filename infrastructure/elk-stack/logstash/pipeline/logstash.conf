# Logstash pipeline configuration for HA Ingestor

input {
  # File input for application logs
  file {
    path => "/var/log/ha-ingestor/*.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb"
    codec => "json"
    tags => ["ha-ingestor", "application"]
  }
  
  # Beats input for system logs
  beats {
    port => 5044
    tags => ["ha-ingestor", "beats"]
  }
  
  # TCP input for direct log streaming
  tcp {
    port => 5000
    codec => json_lines
    tags => ["ha-ingestor", "tcp"]
  }
}

filter {
  # Parse structured JSON logs
  if "application" in [tags] {
    # Extract service name from log path
    if [path] =~ /\/var\/log\/ha-ingestor\/([^\/]+)\.log/ {
      mutate {
        add_field => { "service_name" => "%{[path][1]}" }
      }
    }
    
    # Parse timestamp
    if [timestamp] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }
    
    # Extract correlation ID
    if [correlation_id] {
      mutate {
        add_field => { "correlation_id" => "%{correlation_id}" }
      }
    }
    
    # Parse performance metrics
    if [performance] {
      json {
        source => "performance"
        target => "performance_metrics"
      }
    }
    
    # Parse context information
    if [context] {
      json {
        source => "context"
        target => "context_info"
      }
    }
    
    # Parse error information
    if [exception] {
      json {
        source => "exception"
        target => "error_info"
      }
    }
    
    # Add log level mapping
    if [level] {
      mutate {
        add_field => { "log_level" => "%{level}" }
      }
    }
  }
  
  # Parse Docker container logs
  if "beats" in [tags] {
    if [container] {
      json {
        source => "container"
        target => "container_info"
      }
    }
    
    # Extract service name from container name
    if [container][name] {
      mutate {
        add_field => { "service_name" => "%{[container][name]}" }
      }
    }
  }
  
  # Add common fields
  mutate {
    add_field => { 
      "environment" => "production"
      "log_type" => "application"
    }
  }
  
  # Remove sensitive information
  mutate {
    remove_field => [ "password", "token", "secret", "key" ]
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "ha-ingestor-logs-%{+YYYY.MM.dd}"
    template_name => "ha-ingestor-logs"
    template_pattern => "ha-ingestor-logs-*"
    template => {
      "index_patterns" => ["ha-ingestor-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.lifecycle.name" => "ha-ingestor-policy"
        "index.lifecycle.rollover_alias" => "ha-ingestor-logs"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "timestamp" => { "type" => "date" }
          "level" => { "type" => "keyword" }
          "log_level" => { "type" => "keyword" }
          "service" => { "type" => "keyword" }
          "service_name" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "correlation_id" => { "type" => "keyword" }
          "operation" => { "type" => "keyword" }
          "event_type" => { "type" => "keyword" }
          "entity_id" => { "type" => "keyword" }
          "domain" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "log_type" => { "type" => "keyword" }
          "performance_metrics" => {
            "properties" => {
              "operation" => { "type" => "keyword" }
              "duration_ms" => { "type" => "float" }
              "status" => { "type" => "keyword" }
            }
          }
          "context_info" => {
            "properties" => {
              "filename" => { "type" => "keyword" }
              "lineno" => { "type" => "integer" }
              "function" => { "type" => "keyword" }
              "module" => { "type" => "keyword" }
            }
          }
          "error_info" => {
            "properties" => {
              "type" => { "type" => "keyword" }
              "message" => { "type" => "text" }
              "traceback" => { "type" => "text" }
            }
          }
        }
      }
    }
  }
  
  # Output to stdout for debugging
  stdout {
    codec => rubydebug
  }
}
