# MQTT Configuration Examples for ha-ingestor
# AI ASSISTANT CONTEXT: Use these examples when configuring MQTT clients

## Basic MQTT Configuration
mqtt:
  broker: "192.168.1.86"  # Home Assistant MQTT broker
  port: 1883               # Standard MQTT port
  username: "mqtt_user"    # MQTT username
  password: "mqtt_password" # MQTT password
  client_id: "ha-ingestor-001"
  keepalive: 60            # Keep-alive interval in seconds
  reconnect_delay: 5        # Reconnection delay in seconds

## Secure MQTT Configuration (TLS)
mqtt_secure:
  broker: "192.168.1.86"
  port: 8883               # MQTT over TLS port
  username: "mqtt_user"
  password: "mqtt_password"
  tls_enabled: true
  tls_ca_cert: "/path/to/ca.crt"
  tls_cert: "/path/to/client.crt"
  tls_key: "/path/to/client.key"
  tls_insecure: false      # Set to true for self-signed certs

## Topic Pattern Examples
topic_patterns:
  # Sensor data
  sensor:
    pattern: "homeassistant/sensor/{entity_id}/state"
    entity_type: "sensor"
    attributes: ["unit_of_measurement", "friendly_name", "device_class"]

  # Binary sensor data
  binary_sensor:
    pattern: "homeassistant/binary_sensor/{entity_id}/state"
    entity_type: "binary_sensor"
    attributes: ["friendly_name", "device_class", "off_delay"]

  # Switch data
  switch:
    pattern: "homeassistant/switch/{entity_id}/state"
    entity_type: "switch"
    attributes: ["friendly_name", "icon"]

  # Light data
  light:
    pattern: "homeassistant/light/{entity_id}/state"
    entity_type: "light"
    attributes: ["brightness", "color_temp", "rgb_color", "friendly_name"]

  # Climate data
  climate:
    pattern: "homeassistant/climate/{entity_id}/state"
    entity_type: "climate"
    attributes: ["temperature", "target_temp", "hvac_mode", "friendly_name"]

  # Device tracker data
  device_tracker:
    pattern: "homeassistant/device_tracker/{entity_id}/state"
    entity_type: "device_tracker"
    attributes: ["latitude", "longitude", "gps_accuracy", "friendly_name"]

## Filter Configuration Examples
filters:
  # Domain-based filtering
  domain_filter:
    enabled: true
    include_domains: ["sensor", "binary_sensor", "switch"]
    exclude_domains: ["device_tracker"]  # Exclude location data

  # Entity-based filtering
  entity_filter:
    enabled: true
    include_entities: ["sensor.temperature_living_room", "sensor.humidity_bedroom"]
    exclude_entities: ["sensor.test_sensor"]

  # Attribute-based filtering
  attribute_filter:
    enabled: true
    include_attributes: ["temperature", "humidity", "pressure"]
    exclude_attributes: ["last_seen", "last_updated"]

  # Time-based filtering
  time_filter:
    enabled: true
    start_time: "06:00"    # 6 AM
    end_time: "22:00"      # 10 PM
    timezone: "America/New_York"

## Transformation Configuration Examples
transformers:
  # Field mapping
  field_mapper:
    enabled: true
    mappings:
      "sensor.temperature_living_room":
        source_field: "state"
        target_field: "temperature_celsius"
        unit_conversion: "celsius_to_fahrenheit"

  # Type conversion
  type_converter:
    enabled: true
    conversions:
      "temperature":
        source_type: "string"
        target_type: "float"
        default_value: 0.0

  # Custom transformation
  custom_transformer:
    enabled: true
    script: "custom_transformations.py"
    function: "transform_custom_data"

## Performance Configuration
performance:
  # Batch processing
  batch_size: 100          # Number of events per batch
  batch_timeout: 5         # Seconds to wait for batch completion

  # Connection pooling
  max_connections: 10      # Maximum concurrent connections
  connection_timeout: 30   # Connection timeout in seconds

  # Rate limiting
  max_events_per_second: 1000
  rate_limit_window: 60    # Rate limit window in seconds

## Monitoring Configuration
monitoring:
  # Health checks
  health_check_interval: 30  # Health check frequency in seconds

  # Metrics collection
  metrics_enabled: true
  metrics_port: 8000

  # Logging
  log_level: "INFO"
  log_format: "json"
  log_file: "logs/ha-ingestor.log"

  # Alerting
  alerts_enabled: true
  alert_webhook: "https://hooks.slack.com/services/..."
