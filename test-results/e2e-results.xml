<testsuites id="" name="" tests="1080" failures="240" skipped="831" errors="0" time="522.6491239999999">
<testsuite name="api-endpoints.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="38" failures="38" skipped="0" time="124.856" errors="0">
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/health - Complete health status" classname="api-endpoints.spec.ts" time="4.027">
<failure message="api-endpoints.spec.ts:17:9 GET /api/v1/health - Complete health status" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:17:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/health - Complete health status 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats - System statistics" classname="api-endpoints.spec.ts" time="3.814">
<failure message="api-endpoints.spec.ts:58:9 GET /api/v1/stats - System statistics" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:58:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats - System statistics 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with period parameter" classname="api-endpoints.spec.ts" time="5.832">
<failure message="api-endpoints.spec.ts:77:9 GET /api/v1/stats with period parameter" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:77:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with period parameter 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with service parameter" classname="api-endpoints.spec.ts" time="4.062">
<failure message="api-endpoints.spec.ts:85:9 GET /api/v1/stats with service parameter" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:85:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with service parameter 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats/services - Service-specific statistics" classname="api-endpoints.spec.ts" time="2.422">
<failure message="api-endpoints.spec.ts:93:9 GET /api/v1/stats/services - Service-specific statistics" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:93:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats/services - Service-specific statistics 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/config - System configuration" classname="api-endpoints.spec.ts" time="30.393">
<failure message="api-endpoints.spec.ts:101:9 GET /api/v1/config - System configuration" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:101:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/config - System configuration 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › PUT /api/v1/config - Update configuration" classname="api-endpoints.spec.ts" time="2.397">
<failure message="api-endpoints.spec.ts:117:9 PUT /api/v1/config - Update configuration" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:117:9 › API Endpoints Tests › Admin API Endpoints › PUT /api/v1/config - Update configuration 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events - Recent events" classname="api-endpoints.spec.ts" time="4.196">
<failure message="api-endpoints.spec.ts:143:9 GET /api/v1/events - Recent events" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:143:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events - Recent events 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with query parameters" classname="api-endpoints.spec.ts" time="3.12">
<failure message="api-endpoints.spec.ts:159:9 GET /api/v1/events with query parameters" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:159:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with query parameters 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with filters" classname="api-endpoints.spec.ts" time="3.715">
<failure message="api-endpoints.spec.ts:168:9 GET /api/v1/events with filters" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:168:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with filters 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/{event_id} - Specific event" classname="api-endpoints.spec.ts" time="1.276">
<failure message="api-endpoints.spec.ts:176:9 GET /api/v1/events/{event_id} - Specific event" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:176:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/{event_id} - Specific event 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › POST /api/v1/events/search - Search events" classname="api-endpoints.spec.ts" time="0.995">
<failure message="api-endpoints.spec.ts:194:9 POST /api/v1/events/search - Search events" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:194:9 › API Endpoints Tests › Admin API Endpoints › POST /api/v1/events/search - Search events 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats - Event statistics" classname="api-endpoints.spec.ts" time="1.37">
<failure message="api-endpoints.spec.ts:212:9 GET /api/v1/events/stats - Event statistics" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:212:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats - Event statistics 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats with period parameter" classname="api-endpoints.spec.ts" time="1.125">
<failure message="api-endpoints.spec.ts:220:9 GET /api/v1/events/stats with period parameter" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:220:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats with period parameter 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities - Active entities" classname="api-endpoints.spec.ts" time="0.701">
<failure message="api-endpoints.spec.ts:228:9 GET /api/v1/events/entities - Active entities" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:228:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities - Active entities 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities with limit" classname="api-endpoints.spec.ts" time="1.083">
<failure message="api-endpoints.spec.ts:236:9 GET /api/v1/events/entities with limit" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:236:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities with limit 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/types - Event types" classname="api-endpoints.spec.ts" time="0.868">
<failure message="api-endpoints.spec.ts:245:9 GET /api/v1/events/types - Event types" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:245:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/types - Event types 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › GET /health - WebSocket service health" classname="api-endpoints.spec.ts" time="0.778">
<failure message="api-endpoints.spec.ts:256:9 GET /health - WebSocket service health" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:256:9 › API Endpoints Tests › WebSocket Ingestion Service Endpoints › GET /health - WebSocket service health 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › WebSocket connection endpoint" classname="api-endpoints.spec.ts" time="1.087">
<failure message="api-endpoints.spec.ts:266:9 WebSocket connection endpoint" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:266:9 › API Endpoints Tests › WebSocket Ingestion Service Endpoints › WebSocket connection endpoint 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Enrichment Pipeline Service Endpoints › GET /health - Enrichment service health" classname="api-endpoints.spec.ts" time="0.878">
<failure message="api-endpoints.spec.ts:301:9 GET /health - Enrichment service health" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:301:9 › API Endpoints Tests › Enrichment Pipeline Service Endpoints › GET /health - Enrichment service health 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /health - Data retention service health" classname="api-endpoints.spec.ts" time="1.791">
<failure message="api-endpoints.spec.ts:325:9 GET /health - Data retention service health" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:325:9 › API Endpoints Tests › Data Retention Service Endpoints › GET /health - Data retention service health 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /stats - Data retention statistics" classname="api-endpoints.spec.ts" time="0.992">
<failure message="api-endpoints.spec.ts:335:9 GET /stats - Data retention statistics" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:335:9 › API Endpoints Tests › Data Retention Service Endpoints › GET /stats - Data retention statistics 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /health - InfluxDB health" classname="api-endpoints.spec.ts" time="1.231">
<failure message="api-endpoints.spec.ts:355:9 GET /health - InfluxDB health" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:355:9 › API Endpoints Tests › InfluxDB Endpoints › GET /health - InfluxDB health 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ping - InfluxDB ping" classname="api-endpoints.spec.ts" time="1.145">
<failure message="api-endpoints.spec.ts:365:9 GET /ping - InfluxDB ping" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:365:9 › API Endpoints Tests › InfluxDB Endpoints › GET /ping - InfluxDB ping 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ready - InfluxDB ready check" classname="api-endpoints.spec.ts" time="1.443">
<failure message="api-endpoints.spec.ts:370:9 GET /ready - InfluxDB ready check" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:370:9 › API Endpoints Tests › InfluxDB Endpoints › GET /ready - InfluxDB ready check 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Weather API Service Endpoints › GET /health - Weather API health" classname="api-endpoints.spec.ts" time="1.456">
<failure message="api-endpoints.spec.ts:378:9 GET /health - Weather API health" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:378:9 › API Endpoints Tests › Weather API Service Endpoints › GET /health - Weather API health 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › 404 error handling" classname="api-endpoints.spec.ts" time="1.803">
<failure message="api-endpoints.spec.ts:391:9 404 error handling" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:391:9 › API Endpoints Tests › API Error Handling › 404 error handling 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Invalid parameter handling" classname="api-endpoints.spec.ts" time="1.242">
<failure message="api-endpoints.spec.ts:396:9 Invalid parameter handling" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:396:9 › API Endpoints Tests › API Error Handling › Invalid parameter handling 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Large limit parameter handling" classname="api-endpoints.spec.ts" time="1.165">
<failure message="api-endpoints.spec.ts:401:9 Large limit parameter handling" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:401:9 › API Endpoints Tests › API Error Handling › Large limit parameter handling 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › JSON parsing error detection for all endpoints" classname="api-endpoints.spec.ts" time="1.288">
<failure message="api-endpoints.spec.ts:409:9 JSON parsing error detection for all endpoints" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:409:9 › API Endpoints Tests › API Error Handling › JSON parsing error detection for all endpoints 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Health endpoint response time" classname="api-endpoints.spec.ts" time="4.88">
<failure message="api-endpoints.spec.ts:448:9 Health endpoint response time" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:448:9 › API Endpoints Tests › API Response Time Performance › Health endpoint response time 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Stats endpoint response time" classname="api-endpoints.spec.ts" time="0.734">
<failure message="api-endpoints.spec.ts:457:9 Stats endpoint response time" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:457:9 › API Endpoints Tests › API Response Time Performance › Stats endpoint response time 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Events endpoint response time" classname="api-endpoints.spec.ts" time="1.293">
<failure message="api-endpoints.spec.ts:466:9 Events endpoint response time" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:466:9 › API Endpoints Tests › API Response Time Performance › Events endpoint response time 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Health data structure validation" classname="api-endpoints.spec.ts" time="3.928">
<failure message="api-endpoints.spec.ts:478:9 Health data structure validation" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:478:9 › API Endpoints Tests › API Data Validation › Health data structure validation 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Events data structure validation" classname="api-endpoints.spec.ts" time="0.823">
<failure message="api-endpoints.spec.ts:504:9 Events data structure validation" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:504:9 › API Endpoints Tests › API Data Validation › Events data structure validation 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Statistics data validation" classname="api-endpoints.spec.ts" time="22.227">
<failure message="api-endpoints.spec.ts:537:9 Statistics data validation" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:537:9 › API Endpoints Tests › API Data Validation › Statistics data validation 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent health requests" classname="api-endpoints.spec.ts" time="2.278">
<failure message="api-endpoints.spec.ts:567:9 Multiple concurrent health requests" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:567:9 › API Endpoints Tests › Concurrent API Requests › Multiple concurrent health requests 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent stats requests" classname="api-endpoints.spec.ts" time="0.998">
<failure message="api-endpoints.spec.ts:579:9 Multiple concurrent stats requests" type="FAILURE">
<![CDATA[  [docker-chromium] › api-endpoints.spec.ts:579:9 › API Endpoints Tests › Concurrent API Requests › Multiple concurrent stats requests 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="cross-service-integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="14" failures="14" skipped="0" time="12.679" errors="0">
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › End-to-end data flow from ingestion to dashboard display" classname="cross-service-integration.spec.ts" time="0.867">
<failure message="cross-service-integration.spec.ts:27:9 End-to-end data flow from ingestion to dashboard display" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:27:9 › Cross-Service Integration Tests › Complete Data Flow Integration › End-to-end data flow from ingestion to dashboard display 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--19edb-estion-to-dashboard-display-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--19edb-estion-to-dashboard-display-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--19edb-estion-to-dashboard-display-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--19edb-estion-to-dashboard-display-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Service dependency chain validation" classname="cross-service-integration.spec.ts" time="1.054">
<failure message="cross-service-integration.spec.ts:65:9 Service dependency chain validation" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:65:9 › Cross-Service Integration Tests › Complete Data Flow Integration › Service dependency chain validation 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--c9a24-dependency-chain-validation-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--c9a24-dependency-chain-validation-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--c9a24-dependency-chain-validation-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--c9a24-dependency-chain-validation-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Real-time data synchronization across services" classname="cross-service-integration.spec.ts" time="0.889">
<failure message="cross-service-integration.spec.ts:98:9 Real-time data synchronization across services" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:98:9 › Cross-Service Integration Tests › Complete Data Flow Integration › Real-time data synchronization across services 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--89155-hronization-across-services-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--89155-hronization-across-services-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--89155-hronization-across-services-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--89155-hronization-across-services-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › WebSocket to Admin API communication" classname="cross-service-integration.spec.ts" time="0.861">
<failure message="cross-service-integration.spec.ts:127:9 WebSocket to Admin API communication" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:127:9 › Cross-Service Integration Tests › Service Communication Patterns › WebSocket to Admin API communication 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--ecdb2--to-Admin-API-communication-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--ecdb2--to-Admin-API-communication-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--ecdb2--to-Admin-API-communication-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--ecdb2--to-Admin-API-communication-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › Enrichment Pipeline to Admin API communication" classname="cross-service-integration.spec.ts" time="0.982">
<failure message="cross-service-integration.spec.ts:148:9 Enrichment Pipeline to Admin API communication" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:148:9 › Cross-Service Integration Tests › Service Communication Patterns › Enrichment Pipeline to Admin API communication 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--b3f82--to-Admin-API-communication-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--b3f82--to-Admin-API-communication-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--b3f82--to-Admin-API-communication-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--b3f82--to-Admin-API-communication-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › InfluxDB to all services communication" classname="cross-service-integration.spec.ts" time="0.934">
<failure message="cross-service-integration.spec.ts:169:9 InfluxDB to all services communication" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:169:9 › Cross-Service Integration Tests › Service Communication Patterns › InfluxDB to all services communication 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--420fa--all-services-communication-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--420fa--all-services-communication-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--420fa--all-services-communication-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--420fa--all-services-communication-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Event data consistency between services" classname="cross-service-integration.spec.ts" time="0.877">
<failure message="cross-service-integration.spec.ts:197:9 Event data consistency between services" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:197:9 › Cross-Service Integration Tests › Data Consistency Across Services › Event data consistency between services 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--646e5-onsistency-between-services-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--646e5-onsistency-between-services-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--646e5-onsistency-between-services-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--646e5-onsistency-between-services-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Statistics consistency across service endpoints" classname="cross-service-integration.spec.ts" time="0.774">
<failure message="cross-service-integration.spec.ts:222:9 Statistics consistency across service endpoints" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:222:9 › Cross-Service Integration Tests › Data Consistency Across Services › Statistics consistency across service endpoints 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--f7217-cy-across-service-endpoints-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--f7217-cy-across-service-endpoints-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--f7217-cy-across-service-endpoints-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--f7217-cy-across-service-endpoints-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Health status consistency across all services" classname="cross-service-integration.spec.ts" time="0.796">
<failure message="cross-service-integration.spec.ts:243:9 Health status consistency across all services" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:243:9 › Cross-Service Integration Tests › Data Consistency Across Services › Health status consistency across all services 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--589fd-istency-across-all-services-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--589fd-istency-across-all-services-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--589fd-istency-across-all-services-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--589fd-istency-across-all-services-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › InfluxDB failure propagation" classname="cross-service-integration.spec.ts" time="0.973">
<failure message="cross-service-integration.spec.ts:286:9 InfluxDB failure propagation" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:286:9 › Cross-Service Integration Tests › Service Failure Scenarios › InfluxDB failure propagation 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--03b43-nfluxDB-failure-propagation-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--03b43-nfluxDB-failure-propagation-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--03b43-nfluxDB-failure-propagation-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--03b43-nfluxDB-failure-propagation-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › WebSocket service failure handling" classname="cross-service-integration.spec.ts" time="0.938">
<failure message="cross-service-integration.spec.ts:333:9 WebSocket service failure handling" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:333:9 › Cross-Service Integration Tests › Service Failure Scenarios › WebSocket service failure handling 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--d44a1-et-service-failure-handling-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--d44a1-et-service-failure-handling-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--d44a1-et-service-failure-handling-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--d44a1-et-service-failure-handling-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › Enrichment pipeline failure handling" classname="cross-service-integration.spec.ts" time="0.962">
<failure message="cross-service-integration.spec.ts:365:9 Enrichment pipeline failure handling" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:365:9 › Cross-Service Integration Tests › Service Failure Scenarios › Enrichment pipeline failure handling 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--05ea3-t-pipeline-failure-handling-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--05ea3-t-pipeline-failure-handling-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--05ea3-t-pipeline-failure-handling-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--05ea3-t-pipeline-failure-handling-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Configuration changes propagate across services" classname="cross-service-integration.spec.ts" time="0.896">
<failure message="cross-service-integration.spec.ts:400:9 Configuration changes propagate across services" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:400:9 › Cross-Service Integration Tests › Configuration Propagation › Configuration changes propagate across services 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--bd09d-s-propagate-across-services-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--bd09d-s-propagate-across-services-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--bd09d-s-propagate-across-services-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--bd09d-s-propagate-across-services-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Service-specific configuration validation" classname="cross-service-integration.spec.ts" time="0.876">
<failure message="cross-service-integration.spec.ts:432:9 Service-specific configuration validation" type="FAILURE">
<![CDATA[  [docker-chromium] › cross-service-integration.spec.ts:432:9 › Cross-Service Integration Tests › Configuration Propagation › Service-specific configuration validation 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\cross-service-integration.spec.ts:20:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\cross-service-integration--add52-ic-configuration-validation-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\cross-service-integration--add52-ic-configuration-validation-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--add52-ic-configuration-validation-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\cross-service-integration--add52-ic-configuration-validation-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="dashboard-data-loading.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="12" failures="12" skipped="0" time="54.798" errors="0">
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Dashboard loads without JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="0.89">
<failure message="dashboard-data-loading.spec.ts:17:9 Dashboard loads without JSON parsing errors" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:17:9 › Dashboard Data Loading Validation › Critical Data Loading Tests › Dashboard loads without JSON parsing errors 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Health data loads and displays correctly" classname="dashboard-data-loading.spec.ts" time="1.201">
<failure message="dashboard-data-loading.spec.ts:46:9 Health data loads and displays correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:46:9 › Dashboard Data Loading Validation › Critical Data Loading Tests › Health data loads and displays correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Statistics data loads without errors" classname="dashboard-data-loading.spec.ts" time="27.39">
<failure message="dashboard-data-loading.spec.ts:68:9 Statistics data loads without errors" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:68:9 › Dashboard Data Loading Validation › Critical Data Loading Tests › Statistics data loads without errors 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Events data loads without errors" classname="dashboard-data-loading.spec.ts" time="2.64">
<failure message="dashboard-data-loading.spec.ts:90:9 Events data loads without errors" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:90:9 › Dashboard Data Loading Validation › Critical Data Loading Tests › Events data loads without errors 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Real-time updates work without JSON errors" classname="dashboard-data-loading.spec.ts" time="3.165">
<failure message="dashboard-data-loading.spec.ts:107:9 Real-time updates work without JSON errors" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:107:9 › Dashboard Data Loading Validation › Critical Data Loading Tests › Real-time updates work without JSON errors 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › All API endpoints return valid JSON" classname="dashboard-data-loading.spec.ts" time="2.275">
<failure message="dashboard-data-loading.spec.ts:139:9 All API endpoints return valid JSON" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:139:9 › Dashboard Data Loading Validation › API Response Validation › All API endpoints return valid JSON 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › API responses have expected structure" classname="dashboard-data-loading.spec.ts" time="2.435">
<failure message="dashboard-data-loading.spec.ts:167:9 API responses have expected structure" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:167:9 › Dashboard Data Loading Validation › API Response Validation › API responses have expected structure 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Detects and reports JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="5.841">
<failure message="dashboard-data-loading.spec.ts:194:9 Detects and reports JSON parsing errors" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:194:9 › Dashboard Data Loading Validation › Error State Detection › Detects and reports JSON parsing errors 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Error states are displayed correctly when APIs fail" classname="dashboard-data-loading.spec.ts" time="1.933">
<failure message="dashboard-data-loading.spec.ts:224:9 Error states are displayed correctly when APIs fail" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:224:9 › Dashboard Data Loading Validation › Error State Detection › Error states are displayed correctly when APIs fail 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Retry mechanism works correctly" classname="dashboard-data-loading.spec.ts" time="2.009">
<failure message="dashboard-data-loading.spec.ts:244:9 Retry mechanism works correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:244:9 › Dashboard Data Loading Validation › Error State Detection › Retry mechanism works correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Dashboard loads within acceptable time limits" classname="dashboard-data-loading.spec.ts" time="1.721">
<failure message="dashboard-data-loading.spec.ts:269:9 Dashboard loads within acceptable time limits" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:269:9 › Dashboard Data Loading Validation › Performance and Reliability › Dashboard loads within acceptable time limits 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Multiple rapid navigations work without errors" classname="dashboard-data-loading.spec.ts" time="3.298">
<failure message="dashboard-data-loading.spec.ts:281:9 Multiple rapid navigations work without errors" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-data-loading.spec.ts:281:9 › Dashboard Data Loading Validation › Performance and Reliability › Multiple rapid navigations work without errors 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for initial load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Critical Data Loading Tests', () => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-data-loading.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="dashboard-functionality.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="10" failures="10" skipped="0" time="71.401" errors="0">
<testcase name="Dashboard Functionality Tests › Main dashboard loads and displays all components" classname="dashboard-functionality.spec.ts" time="2.283">
<failure message="dashboard-functionality.spec.ts:14:7 Main dashboard loads and displays all components" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:14:7 › Dashboard Functionality Tests › Main dashboard loads and displays all components 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Functionality Tests › Navigation works correctly between screens" classname="dashboard-functionality.spec.ts" time="3.179">
<failure message="dashboard-functionality.spec.ts:30:7 Navigation works correctly between screens" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:30:7 › Dashboard Functionality Tests › Navigation works correctly between screens 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Functionality Tests › Refresh controls work correctly" classname="dashboard-functionality.spec.ts" time="2.936">
<failure message="dashboard-functionality.spec.ts:47:7 Refresh controls work correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:47:7 › Dashboard Functionality Tests › Refresh controls work correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Functionality Tests › Layout switcher changes dashboard layout" classname="dashboard-functionality.spec.ts" time="3.273">
<failure message="dashboard-functionality.spec.ts:64:7 Layout switcher changes dashboard layout" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:64:7 › Dashboard Functionality Tests › Layout switcher changes dashboard layout 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Functionality Tests › Health cards display correct information" classname="dashboard-functionality.spec.ts" time="28.771">
<failure message="dashboard-functionality.spec.ts:90:7 Health cards display correct information" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:90:7 › Dashboard Functionality Tests › Health cards display correct information 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Functionality Tests › Statistics chart renders and updates" classname="dashboard-functionality.spec.ts" time="24.074">
<failure message="dashboard-functionality.spec.ts:108:7 Statistics chart renders and updates" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:108:7 › Dashboard Functionality Tests › Statistics chart renders and updates 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Functionality Tests › Events feed displays recent events" classname="dashboard-functionality.spec.ts" time="1.955">
<failure message="dashboard-functionality.spec.ts:128:7 Events feed displays recent events" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:128:7 › Dashboard Functionality Tests › Events feed displays recent events 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Functionality Tests › Mobile responsive design works correctly" classname="dashboard-functionality.spec.ts" time="1.95">
<failure message="dashboard-functionality.spec.ts:148:7 Mobile responsive design works correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:148:7 › Dashboard Functionality Tests › Mobile responsive design works correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Functionality Tests › Theme toggle works correctly" classname="dashboard-functionality.spec.ts" time="1.357">
<failure message="dashboard-functionality.spec.ts:168:7 Theme toggle works correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:168:7 › Dashboard Functionality Tests › Theme toggle works correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Dashboard Functionality Tests › Notification system displays alerts correctly" classname="dashboard-functionality.spec.ts" time="1.623">
<failure message="dashboard-functionality.spec.ts:185:7 Notification system displays alerts correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › dashboard-functionality.spec.ts:185:7 › Dashboard Functionality Tests › Notification system displays alerts correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Main dashboard loads and displays all components', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\dashboard-functionality.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="error-handling-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="16" failures="16" skipped="0" time="42.469" errors="0">
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Detects and handles HTML responses instead of JSON" classname="error-handling-comprehensive.spec.ts" time="1.438">
<failure message="error-handling-comprehensive.spec.ts:17:9 Detects and handles HTML responses instead of JSON" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:17:9 › Comprehensive Error Handling › JSON Parsing Error Scenarios › Detects and handles HTML responses instead of JSON 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles malformed JSON responses gracefully" classname="error-handling-comprehensive.spec.ts" time="1.158">
<failure message="error-handling-comprehensive.spec.ts:64:9 Handles malformed JSON responses gracefully" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:64:9 › Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles malformed JSON responses gracefully 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles empty JSON responses" classname="error-handling-comprehensive.spec.ts" time="4.155">
<failure message="error-handling-comprehensive.spec.ts:94:9 Handles empty JSON responses" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:94:9 › Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles empty JSON responses 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles non-JSON content types" classname="error-handling-comprehensive.spec.ts" time="1.213">
<failure message="error-handling-comprehensive.spec.ts:113:9 Handles non-JSON content types" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:113:9 › Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles non-JSON content types 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles complete API service failure" classname="error-handling-comprehensive.spec.ts" time="1.838">
<failure message="error-handling-comprehensive.spec.ts:135:9 Handles complete API service failure" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:135:9 › Comprehensive Error Handling › Network Error Scenarios › Handles complete API service failure 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles partial API service failure" classname="error-handling-comprehensive.spec.ts" time="1.276">
<failure message="error-handling-comprehensive.spec.ts:152:9 Handles partial API service failure" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:152:9 › Comprehensive Error Handling › Network Error Scenarios › Handles partial API service failure 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles slow API responses" classname="error-handling-comprehensive.spec.ts" time="1.813">
<failure message="error-handling-comprehensive.spec.ts:172:9 Handles slow API responses" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:172:9 › Comprehensive Error Handling › Network Error Scenarios › Handles slow API responses 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles timeout scenarios" classname="error-handling-comprehensive.spec.ts" time="1.124">
<failure message="error-handling-comprehensive.spec.ts:210:9 Handles timeout scenarios" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:210:9 › Comprehensive Error Handling › Network Error Scenarios › Handles timeout scenarios 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles InfluxDB connection errors" classname="error-handling-comprehensive.spec.ts" time="2.008">
<failure message="error-handling-comprehensive.spec.ts:227:9 Handles InfluxDB connection errors" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:227:9 › Comprehensive Error Handling › Service-Specific Error Scenarios › Handles InfluxDB connection errors 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles WebSocket connection errors" classname="error-handling-comprehensive.spec.ts" time="1.124">
<failure message="error-handling-comprehensive.spec.ts:258:9 Handles WebSocket connection errors" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:258:9 › Comprehensive Error Handling › Service-Specific Error Scenarios › Handles WebSocket connection errors 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Retry mechanism works after temporary failure" classname="error-handling-comprehensive.spec.ts" time="1.084">
<failure message="error-handling-comprehensive.spec.ts:291:9 Retry mechanism works after temporary failure" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:291:9 › Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Retry mechanism works after temporary failure 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Manual retry button works correctly" classname="error-handling-comprehensive.spec.ts" time="0.707">
<failure message="error-handling-comprehensive.spec.ts:315:9 Manual retry button works correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:315:9 › Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Manual retry button works correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Automatic retry with exponential backoff" classname="error-handling-comprehensive.spec.ts" time="1.282">
<failure message="error-handling-comprehensive.spec.ts:338:9 Automatic retry with exponential backoff" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:338:9 › Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Automatic retry with exponential backoff 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Error messages are user-friendly" classname="error-handling-comprehensive.spec.ts" time="19.859">
<failure message="error-handling-comprehensive.spec.ts:371:9 Error messages are user-friendly" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:371:9 › Comprehensive Error Handling › User Experience During Errors › Error messages are user-friendly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Loading states are shown during errors" classname="error-handling-comprehensive.spec.ts" time="1.435">
<failure message="error-handling-comprehensive.spec.ts:403:9 Loading states are shown during errors" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:403:9 › Comprehensive Error Handling › User Experience During Errors › Loading states are shown during errors 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Navigation works during error states" classname="error-handling-comprehensive.spec.ts" time="0.955">
<failure message="error-handling-comprehensive.spec.ts:426:9 Navigation works during error states" type="FAILURE">
<![CDATA[  [docker-chromium] › error-handling-comprehensive.spec.ts:426:9 › Comprehensive Error Handling › User Experience During Errors › Navigation works during error states 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('JSON Parsing Error Scenarios', () => {
        at C:\cursor\ha-ingestor\tests\e2e\error-handling-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="frontend-ui-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="31" failures="31" skipped="0" time="74.996" errors="0">
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Dashboard loads completely with all components" classname="frontend-ui-comprehensive.spec.ts" time="1.293">
<failure message="frontend-ui-comprehensive.spec.ts:18:9 Dashboard loads completely with all components" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:18:9 › Frontend UI Comprehensive Tests › Dashboard Main Screen › Dashboard loads completely with all components 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › System health status displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="1.369">
<failure message="frontend-ui-comprehensive.spec.ts:53:9 System health status displays correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:53:9 › Frontend UI Comprehensive Tests › Dashboard Main Screen › System health status displays correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Health cards show correct information" classname="frontend-ui-comprehensive.spec.ts" time="1.165">
<failure message="frontend-ui-comprehensive.spec.ts:71:9 Health cards show correct information" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:71:9 › Frontend UI Comprehensive Tests › Dashboard Main Screen › Health cards show correct information 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Real-time updates work correctly" classname="frontend-ui-comprehensive.spec.ts" time="1.453">
<failure message="frontend-ui-comprehensive.spec.ts:100:9 Real-time updates work correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:100:9 › Frontend UI Comprehensive Tests › Dashboard Main Screen › Real-time updates work correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Navigation menu works correctly" classname="frontend-ui-comprehensive.spec.ts" time="3.829">
<failure message="frontend-ui-comprehensive.spec.ts:120:9 Navigation menu works correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:120:9 › Frontend UI Comprehensive Tests › Navigation and Routing › Navigation menu works correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › URL routing works correctly" classname="frontend-ui-comprehensive.spec.ts" time="1.425">
<failure message="frontend-ui-comprehensive.spec.ts:140:9 URL routing works correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:140:9 › Frontend UI Comprehensive Tests › Navigation and Routing › URL routing works correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Browser back/forward navigation works" classname="frontend-ui-comprehensive.spec.ts" time="1.228">
<failure message="frontend-ui-comprehensive.spec.ts:155:9 Browser back/forward navigation works" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:155:9 › Frontend UI Comprehensive Tests › Navigation and Routing › Browser back/forward navigation works 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Monitoring screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="3.672">
<failure message="frontend-ui-comprehensive.spec.ts:175:9 Monitoring screen loads completely" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:175:9 › Frontend UI Comprehensive Tests › Monitoring Screen › Monitoring screen loads completely 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Performance metrics display correctly" classname="frontend-ui-comprehensive.spec.ts" time="1.731">
<failure message="frontend-ui-comprehensive.spec.ts:196:9 Performance metrics display correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:196:9 › Frontend UI Comprehensive Tests › Monitoring Screen › Performance metrics display correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Service monitoring shows all services" classname="frontend-ui-comprehensive.spec.ts" time="1.044">
<failure message="frontend-ui-comprehensive.spec.ts:219:9 Service monitoring shows all services" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:219:9 › Frontend UI Comprehensive Tests › Monitoring Screen › Service monitoring shows all services 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Real-time monitoring updates work" classname="frontend-ui-comprehensive.spec.ts" time="0.969">
<failure message="frontend-ui-comprehensive.spec.ts:241:9 Real-time monitoring updates work" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:241:9 › Frontend UI Comprehensive Tests › Monitoring Screen › Real-time monitoring updates work 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="1.617">
<failure message="frontend-ui-comprehensive.spec.ts:262:9 Settings screen loads completely" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:262:9 › Frontend UI Comprehensive Tests › Settings Screen › Settings screen loads completely 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › General settings are editable" classname="frontend-ui-comprehensive.spec.ts" time="1.23">
<failure message="frontend-ui-comprehensive.spec.ts:275:9 General settings are editable" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:275:9 › Frontend UI Comprehensive Tests › Settings Screen › General settings are editable 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Service settings display correctly" classname="frontend-ui-comprehensive.spec.ts" time="1.004">
<failure message="frontend-ui-comprehensive.spec.ts:293:9 Service settings display correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:293:9 › Frontend UI Comprehensive Tests › Settings Screen › Service settings display correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Notification settings work" classname="frontend-ui-comprehensive.spec.ts" time="0.834">
<failure message="frontend-ui-comprehensive.spec.ts:307:9 Notification settings work" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:307:9 › Frontend UI Comprehensive Tests › Settings Screen › Notification settings work 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings save functionality" classname="frontend-ui-comprehensive.spec.ts" time="2.207">
<failure message="frontend-ui-comprehensive.spec.ts:325:9 Settings save functionality" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:325:9 › Frontend UI Comprehensive Tests › Settings Screen › Settings save functionality 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles API errors gracefully" classname="frontend-ui-comprehensive.spec.ts" time="1.522">
<failure message="frontend-ui-comprehensive.spec.ts:346:9 Handles API errors gracefully" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:346:9 › Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles API errors gracefully 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Detects JSON parsing errors in dashboard" classname="frontend-ui-comprehensive.spec.ts" time="2.788">
<failure message="frontend-ui-comprehensive.spec.ts:367:9 Detects JSON parsing errors in dashboard" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:367:9 › Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Detects JSON parsing errors in dashboard 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles slow API responses" classname="frontend-ui-comprehensive.spec.ts" time="4.687">
<failure message="frontend-ui-comprehensive.spec.ts:397:9 Handles slow API responses" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:397:9 › Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles slow API responses 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles empty data responses" classname="frontend-ui-comprehensive.spec.ts" time="0.835">
<failure message="frontend-ui-comprehensive.spec.ts:430:9 Handles empty data responses" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:430:9 › Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles empty data responses 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles malformed JSON responses" classname="frontend-ui-comprehensive.spec.ts" time="2.788">
<failure message="frontend-ui-comprehensive.spec.ts:452:9 Handles malformed JSON responses" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:452:9 › Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles malformed JSON responses 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles HTML responses instead of JSON" classname="frontend-ui-comprehensive.spec.ts" time="5.207">
<failure message="frontend-ui-comprehensive.spec.ts:470:9 Handles HTML responses instead of JSON" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:470:9 › Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles HTML responses instead of JSON 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Mobile viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="1.754">
<failure message="frontend-ui-comprehensive.spec.ts:499:9 Mobile viewport displays correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:499:9 › Frontend UI Comprehensive Tests › Responsive Design › Mobile viewport displays correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Tablet viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="3.127">
<failure message="frontend-ui-comprehensive.spec.ts:522:9 Tablet viewport displays correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:522:9 › Frontend UI Comprehensive Tests › Responsive Design › Tablet viewport displays correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Large desktop viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="1.229">
<failure message="frontend-ui-comprehensive.spec.ts:541:9 Large desktop viewport displays correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:541:9 › Frontend UI Comprehensive Tests › Responsive Design › Large desktop viewport displays correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Keyboard navigation works" classname="frontend-ui-comprehensive.spec.ts" time="3.594">
<failure message="frontend-ui-comprehensive.spec.ts:560:9 Keyboard navigation works" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:560:9 › Frontend UI Comprehensive Tests › Accessibility › Keyboard navigation works 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Screen reader compatibility" classname="frontend-ui-comprehensive.spec.ts" time="12.68">
<failure message="frontend-ui-comprehensive.spec.ts:578:9 Screen reader compatibility" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:578:9 › Frontend UI Comprehensive Tests › Accessibility › Screen reader compatibility 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Color contrast and visual indicators" classname="frontend-ui-comprehensive.spec.ts" time="3.936">
<failure message="frontend-ui-comprehensive.spec.ts:592:9 Color contrast and visual indicators" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:592:9 › Frontend UI Comprehensive Tests › Accessibility › Color contrast and visual indicators 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Page load performance" classname="frontend-ui-comprehensive.spec.ts" time="1.167">
<failure message="frontend-ui-comprehensive.spec.ts:609:9 Page load performance" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:609:9 › Frontend UI Comprehensive Tests › Performance and Loading › Page load performance 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Navigation performance" classname="frontend-ui-comprehensive.spec.ts" time="2.482">
<failure message="frontend-ui-comprehensive.spec.ts:620:9 Navigation performance" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:620:9 › Frontend UI Comprehensive Tests › Performance and Loading › Navigation performance 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Memory usage remains stable" classname="frontend-ui-comprehensive.spec.ts" time="1.13">
<failure message="frontend-ui-comprehensive.spec.ts:634:9 Memory usage remains stable" type="FAILURE">
<![CDATA[  [docker-chromium] › frontend-ui-comprehensive.spec.ts:634:9 › Frontend UI Comprehensive Tests › Performance and Loading › Memory usage remains stable 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard and wait for load
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
      14 |   });
      15 |
        at C:\cursor\ha-ingestor\tests\e2e\frontend-ui-comprehensive.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="integration-performance-enhanced.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="17" failures="17" skipped="0" time="1168.395" errors="0">
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › End-to-end data flow from Home Assistant simulation to dashboard" classname="integration-performance-enhanced.spec.ts" time="66.159">
<failure message="integration-performance-enhanced.spec.ts:17:9 End-to-end data flow from Home Assistant simulation to dashboard" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:17:9 › Enhanced Integration and Performance Tests › Complete Data Flow Integration › End-to-end data flow from Home Assistant simulation to dashboard 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-535a4-ant-simulation-to-dashboard-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-535a4-ant-simulation-to-dashboard-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-535a4-ant-simulation-to-dashboard-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-535a4-ant-simulation-to-dashboard-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Service dependency chain validation" classname="integration-performance-enhanced.spec.ts" time="67.553">
<failure message="integration-performance-enhanced.spec.ts:84:9 Service dependency chain validation" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:84:9 › Enhanced Integration and Performance Tests › Complete Data Flow Integration › Service dependency chain validation 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-cf455-dependency-chain-validation-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-cf455-dependency-chain-validation-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-cf455-dependency-chain-validation-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-cf455-dependency-chain-validation-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Real-time data updates across all components" classname="integration-performance-enhanced.spec.ts" time="67.515">
<failure message="integration-performance-enhanced.spec.ts:117:9 Real-time data updates across all components" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:117:9 › Enhanced Integration and Performance Tests › Complete Data Flow Integration › Real-time data updates across all components 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-1fc88-dates-across-all-components-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-1fc88-dates-across-all-components-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-1fc88-dates-across-all-components-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-1fc88-dates-across-all-components-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Weather enrichment integration end-to-end" classname="integration-performance-enhanced.spec.ts" time="67.978">
<failure message="integration-performance-enhanced.spec.ts:145:9 Weather enrichment integration end-to-end" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:145:9 › Enhanced Integration and Performance Tests › Complete Data Flow Integration › Weather enrichment integration end-to-end 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-c2f92-ment-integration-end-to-end-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-c2f92-ment-integration-end-to-end-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-c2f92-ment-integration-end-to-end-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-c2f92-ment-integration-end-to-end-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Data retention service integration" classname="integration-performance-enhanced.spec.ts" time="68.434">
<failure message="integration-performance-enhanced.spec.ts:169:9 Data retention service integration" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:169:9 › Enhanced Integration and Performance Tests › Complete Data Flow Integration › Data retention service integration 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-61c11-tention-service-integration-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-61c11-tention-service-integration-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-61c11-tention-service-integration-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-61c11-tention-service-integration-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › High-volume concurrent API requests" classname="integration-performance-enhanced.spec.ts" time="68.441">
<failure message="integration-performance-enhanced.spec.ts:197:9 High-volume concurrent API requests" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:197:9 › Enhanced Integration and Performance Tests › Performance and Load Testing › High-volume concurrent API requests 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: InfluxDB failed to become healthy within 60 seconds

       at utils\docker-test-helpers.ts:233

      231 |       const isHealthy = await this.waitForServiceHealthy(page, service.url, 60000);
      232 |       if (!isHealthy) {
    > 233 |         throw new Error(`${service.name} failed to become healthy within 60 seconds`);
          |               ^
      234 |       }
      235 |     }
      236 |     
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:233:15)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-f2018-ume-concurrent-API-requests-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-f2018-ume-concurrent-API-requests-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-f2018-ume-concurrent-API-requests-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-f2018-ume-concurrent-API-requests-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Large dataset query performance" classname="integration-performance-enhanced.spec.ts" time="68.414">
<failure message="integration-performance-enhanced.spec.ts:219:9 Large dataset query performance" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:219:9 › Enhanced Integration and Performance Tests › Performance and Load Testing › Large dataset query performance 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: InfluxDB failed to become healthy within 60 seconds

       at utils\docker-test-helpers.ts:233

      231 |       const isHealthy = await this.waitForServiceHealthy(page, service.url, 60000);
      232 |       if (!isHealthy) {
    > 233 |         throw new Error(`${service.name} failed to become healthy within 60 seconds`);
          |               ^
      234 |       }
      235 |     }
      236 |     
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:233:15)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-b34e7-e-dataset-query-performance-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-b34e7-e-dataset-query-performance-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-b34e7-e-dataset-query-performance-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-b34e7-e-dataset-query-performance-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Memory usage under continuous load" classname="integration-performance-enhanced.spec.ts" time="68.376">
<failure message="integration-performance-enhanced.spec.ts:237:9 Memory usage under continuous load" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:237:9 › Enhanced Integration and Performance Tests › Performance and Load Testing › Memory usage under continuous load 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-2dc0b-usage-under-continuous-load-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-2dc0b-usage-under-continuous-load-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-2dc0b-usage-under-continuous-load-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-2dc0b-usage-under-continuous-load-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Dashboard rendering performance under load" classname="integration-performance-enhanced.spec.ts" time="67.996">
<failure message="integration-performance-enhanced.spec.ts:268:9 Dashboard rendering performance under load" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:268:9 › Enhanced Integration and Performance Tests › Performance and Load Testing › Dashboard rendering performance under load 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-97193-ring-performance-under-load-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-97193-ring-performance-under-load-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-97193-ring-performance-under-load-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-97193-ring-performance-under-load-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › WebSocket connection stability under load" classname="integration-performance-enhanced.spec.ts" time="67.464">
<failure message="integration-performance-enhanced.spec.ts:303:9 WebSocket connection stability under load" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:303:9 › Enhanced Integration and Performance Tests › Performance and Load Testing › WebSocket connection stability under load 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: InfluxDB failed to become healthy within 60 seconds

       at utils\docker-test-helpers.ts:233

      231 |       const isHealthy = await this.waitForServiceHealthy(page, service.url, 60000);
      232 |       if (!isHealthy) {
    > 233 |         throw new Error(`${service.name} failed to become healthy within 60 seconds`);
          |               ^
      234 |       }
      235 |     }
      236 |     
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:233:15)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-e9271-ection-stability-under-load-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-e9271-ection-stability-under-load-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-e9271-ection-stability-under-load-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-e9271-ection-stability-under-load-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Service restart recovery" classname="integration-performance-enhanced.spec.ts" time="68.28">
<failure message="integration-performance-enhanced.spec.ts:331:9 Service restart recovery" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:331:9 › Enhanced Integration and Performance Tests › Error Recovery and Resilience › Service restart recovery 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-409f5-ce-Service-restart-recovery-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-409f5-ce-Service-restart-recovery-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-409f5-ce-Service-restart-recovery-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-409f5-ce-Service-restart-recovery-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Network interruption recovery" classname="integration-performance-enhanced.spec.ts" time="69.82">
<failure message="integration-performance-enhanced.spec.ts:368:9 Network interruption recovery" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:368:9 › Enhanced Integration and Performance Tests › Error Recovery and Resilience › Network interruption recovery 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-9d1be-twork-interruption-recovery-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-9d1be-twork-interruption-recovery-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-9d1be-twork-interruption-recovery-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-9d1be-twork-interruption-recovery-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Partial service failure handling" classname="integration-performance-enhanced.spec.ts" time="69.879">
<failure message="integration-performance-enhanced.spec.ts:393:9 Partial service failure handling" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:393:9 › Enhanced Integration and Performance Tests › Error Recovery and Resilience › Partial service failure handling 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-dbab5-al-service-failure-handling-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-dbab5-al-service-failure-handling-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-dbab5-al-service-failure-handling-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-dbab5-al-service-failure-handling-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Configuration change propagation" classname="integration-performance-enhanced.spec.ts" time="70.12">
<failure message="integration-performance-enhanced.spec.ts:440:9 Configuration change propagation" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:440:9 › Enhanced Integration and Performance Tests › Error Recovery and Resilience › Configuration change propagation 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-8ca0f-guration-change-propagation-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-8ca0f-guration-change-propagation-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-8ca0f-guration-change-propagation-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-8ca0f-guration-change-propagation-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Event data consistency across services" classname="integration-performance-enhanced.spec.ts" time="70.558">
<failure message="integration-performance-enhanced.spec.ts:475:9 Event data consistency across services" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:475:9 › Enhanced Integration and Performance Tests › Data Integrity and Consistency › Event data consistency across services 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-f58af-consistency-across-services-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-f58af-consistency-across-services-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-f58af-consistency-across-services-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-f58af-consistency-across-services-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Statistics accuracy and consistency" classname="integration-performance-enhanced.spec.ts" time="70.711">
<failure message="integration-performance-enhanced.spec.ts:501:9 Statistics accuracy and consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:501:9 › Enhanced Integration and Performance Tests › Data Integrity and Consistency › Statistics accuracy and consistency 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-682e0-cs-accuracy-and-consistency-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-682e0-cs-accuracy-and-consistency-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-682e0-cs-accuracy-and-consistency-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-682e0-cs-accuracy-and-consistency-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Health status consistency across endpoints" classname="integration-performance-enhanced.spec.ts" time="70.697">
<failure message="integration-performance-enhanced.spec.ts:530:9 Health status consistency across endpoints" type="FAILURE">
<![CDATA[  [docker-chromium] › integration-performance-enhanced.spec.ts:530:9 › Enhanced Integration and Performance Tests › Data Integrity and Consistency › Health status consistency across endpoints 

    Test timeout of 60000ms exceeded while running "beforeEach" hook.

       8 | test.describe('Enhanced Integration and Performance Tests', () => {
       9 |   
    > 10 |   test.beforeEach(async ({ page }) => {
         |        ^
      11 |     // Ensure all services are healthy before testing
      12 |     await DockerTestHelpers.waitForDockerComposeReady(page);
      13 |   });
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:10:8

    Error: page.waitForTimeout: Test timeout of 60000ms exceeded.

       at utils\docker-test-helpers.ts:97

       95 |       }
       96 |       
    >  97 |       await page.waitForTimeout(1000);
          |                  ^
       98 |     }
       99 |     
      100 |     return false;
        at Function.waitForServiceHealthy (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:97:18)
        at Function.waitForDockerComposeReady (C:\cursor\ha-ingestor\tests\e2e\utils\docker-test-helpers.ts:231:25)
        at C:\cursor\ha-ingestor\tests\e2e\integration-performance-enhanced.spec.ts:12:5

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\integration-performance-en-dd3b9-onsistency-across-endpoints-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\integration-performance-en-dd3b9-onsistency-across-endpoints-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[Waiting for all Docker services to be ready...

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-dd3b9-onsistency-across-endpoints-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\integration-performance-en-dd3b9-onsistency-across-endpoints-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="11" failures="11" skipped="0" time="11.838" errors="0">
<testcase name="Integration Tests › Complete data flow from Home Assistant to dashboard" classname="integration.spec.ts" time="0.627">
<failure message="integration.spec.ts:15:7 Complete data flow from Home Assistant to dashboard" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:15:7 › Integration Tests › Complete data flow from Home Assistant to dashboard 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › Service dependency chain works correctly" classname="integration.spec.ts" time="2.376">
<failure message="integration.spec.ts:57:7 Service dependency chain works correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:57:7 › Integration Tests › Service dependency chain works correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › Real-time data updates work end-to-end" classname="integration.spec.ts" time="0.596">
<failure message="integration.spec.ts:86:7 Real-time data updates work end-to-end" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:86:7 › Integration Tests › Real-time data updates work end-to-end 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › Weather data enrichment integration works" classname="integration.spec.ts" time="1.994">
<failure message="integration.spec.ts:112:7 Weather data enrichment integration works" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:112:7 › Integration Tests › Weather data enrichment integration works 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › Data retention service integration works" classname="integration.spec.ts" time="0.587">
<failure message="integration.spec.ts:135:7 Data retention service integration works" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:135:7 › Integration Tests › Data retention service integration works 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › Admin API provides comprehensive system information" classname="integration.spec.ts" time="0.825">
<failure message="integration.spec.ts:152:7 Admin API provides comprehensive system information" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:152:7 › Integration Tests › Admin API provides comprehensive system information 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › Error propagation and handling across services" classname="integration.spec.ts" time="0.636">
<failure message="integration.spec.ts:190:7 Error propagation and handling across services" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:190:7 › Integration Tests › Error propagation and handling across services 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › Configuration changes propagate across services" classname="integration.spec.ts" time="1.915">
<failure message="integration.spec.ts:229:7 Configuration changes propagate across services" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:229:7 › Integration Tests › Configuration changes propagate across services 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › WebSocket real-time updates work in dashboard" classname="integration.spec.ts" time="0.936">
<failure message="integration.spec.ts:261:7 WebSocket real-time updates work in dashboard" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:261:7 › Integration Tests › WebSocket real-time updates work in dashboard 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › Performance metrics integration works" classname="integration.spec.ts" time="0.554">
<failure message="integration.spec.ts:285:7 Performance metrics integration works" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:285:7 › Integration Tests › Performance metrics integration works 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Integration Tests › Data export integration works end-to-end" classname="integration.spec.ts" time="0.792">
<failure message="integration.spec.ts:312:7 Data export integration works end-to-end" type="FAILURE">
<![CDATA[  [docker-chromium] › integration.spec.ts:312:7 › Integration Tests › Data export integration works end-to-end 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('Complete data flow from Home Assistant to dashboard', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\integration.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="monitoring-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="10" failures="10" skipped="0" time="24.061" errors="0">
<testcase name="Monitoring Screen Tests › Monitoring screen loads correctly" classname="monitoring-screen.spec.ts" time="0.917">
<failure message="monitoring-screen.spec.ts:14:7 Monitoring screen loads correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:14:7 › Monitoring Screen Tests › Monitoring screen loads correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Monitoring Screen Tests › Service monitoring displays all services" classname="monitoring-screen.spec.ts" time="0.588">
<failure message="monitoring-screen.spec.ts:28:7 Service monitoring displays all services" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:28:7 › Monitoring Screen Tests › Service monitoring displays all services 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Monitoring Screen Tests › Performance metrics display correctly" classname="monitoring-screen.spec.ts" time="0.613">
<failure message="monitoring-screen.spec.ts:48:7 Performance metrics display correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:48:7 › Monitoring Screen Tests › Performance metrics display correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Monitoring Screen Tests › Real-time updates work correctly" classname="monitoring-screen.spec.ts" time="0.619">
<failure message="monitoring-screen.spec.ts:66:7 Real-time updates work correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:66:7 › Monitoring Screen Tests › Real-time updates work correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Monitoring Screen Tests › Service details modal opens and displays information" classname="monitoring-screen.spec.ts" time="1.973">
<failure message="monitoring-screen.spec.ts:81:7 Service details modal opens and displays information" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:81:7 › Monitoring Screen Tests › Service details modal opens and displays information 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Monitoring Screen Tests › Alert management displays active alerts" classname="monitoring-screen.spec.ts" time="2.231">
<failure message="monitoring-screen.spec.ts:104:7 Alert management displays active alerts" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:104:7 › Monitoring Screen Tests › Alert management displays active alerts 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Monitoring Screen Tests › Log viewer displays service logs" classname="monitoring-screen.spec.ts" time="1.041">
<failure message="monitoring-screen.spec.ts:124:7 Log viewer displays service logs" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:124:7 › Monitoring Screen Tests › Log viewer displays service logs 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Monitoring Screen Tests › Export functionality works for monitoring data" classname="monitoring-screen.spec.ts" time="0.718">
<failure message="monitoring-screen.spec.ts:152:7 Export functionality works for monitoring data" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:152:7 › Monitoring Screen Tests › Export functionality works for monitoring data 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Monitoring Screen Tests › Monitoring screen is responsive on mobile" classname="monitoring-screen.spec.ts" time="14.416">
<failure message="monitoring-screen.spec.ts:174:7 Monitoring screen is responsive on mobile" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:174:7 › Monitoring Screen Tests › Monitoring screen is responsive on mobile 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Monitoring Screen Tests › Error states are handled gracefully" classname="monitoring-screen.spec.ts" time="0.945">
<failure message="monitoring-screen.spec.ts:194:7 Error states are handled gracefully" type="FAILURE">
<![CDATA[  [docker-chromium] › monitoring-screen.spec.ts:194:7 › Monitoring Screen Tests › Error states are handled gracefully 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/monitoring');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Monitoring screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\monitoring-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="performance.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="13" failures="13" skipped="0" time="25.56" errors="0">
<testcase name="Performance Tests › Dashboard loads within acceptable time" classname="performance.spec.ts" time="0.927">
<failure message="performance.spec.ts:14:7 Dashboard loads within acceptable time" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:14:7 › Performance Tests › Dashboard loads within acceptable time 

    Error: page.waitForSelector: Target page, context or browser has been closed
    Call log:
      - waiting for locator('[data-testid="dashboard"]') to be visible


      16 |     
      17 |     await page.goto('http://localhost:3000');
    > 18 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
         |                ^
      19 |     
      20 |     const loadTime = Date.now() - startTime;
      21 |     
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:18:16
]]>
</failure>
</testcase>
<testcase name="Performance Tests › API endpoints respond within acceptable time" classname="performance.spec.ts" time="0.912">
<failure message="performance.spec.ts:28:7 API endpoints respond within acceptable time" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:28:7 › Performance Tests › API endpoints respond within acceptable time 

    Error: apiRequestContext.get: connect ECONNREFUSED ::1:8002
    Call log:
      - → GET http://localhost:8002/health
        - user-agent: Playwright-E2E-Tests
        - accept: application/json, text/plain, */*
        - accept-encoding: gzip,deflate,br

        at apiRequestContext.get: connect ECONNREFUSED ::1:8002
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:40:43

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-54e41-pond-within-acceptable-time-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-54e41-pond-within-acceptable-time-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[http://localhost:8086/health response time: 71ms
http://localhost:8001/health response time: 114ms

[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-54e41-pond-within-acceptable-time-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-54e41-pond-within-acceptable-time-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Performance Tests › Statistics API performs well under load" classname="performance.spec.ts" time="10.668">
<failure message="performance.spec.ts:52:7 Statistics API performs well under load" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:52:7 › Performance Tests › Statistics API performs well under load 

    Error: expect(received).toHaveProperty(path)

    Expected path: "total_events"
    Received path: []

    Received value: {"alerts": [{"level": "error", "message": "Cannot connect to host homeiq-enrichment:8002 ssl:default [Name does not resolve]", "service": "enrichment-pipeline"}, {"level": "error", "message": "Cannot connect to host homeiq-weather-api:8001 ssl:default [Connection refused]", "service": "weather-api"}], "metrics": {"admin-api": {"healthy": true, "status": "healthy", "uptime_seconds": 294.044156}, "air-quality-service": {"healthy": true, "status": "healthy", "uptime_seconds": 4299.142554}, "calendar-service": {"healthy": true, "status": "healthy", "uptime_seconds": 4298.948294}, "carbon-intensity-service": {"healthy": true, "status": "healthy", "uptime_seconds": 4299.370995}, "data-api": {"healthy": true, "status": "healthy", "uptime_seconds": 306.226569}, "data-retention": {"healthy": true, "status": "healthy", "uptime_seconds": 0}, "electricity-pricing-service": {"healthy": true, "status": "healthy", "uptime_seconds": 4299.310686}, "energy-correlator": {"healthy": true, "status": "healthy", "uptime_seconds": 4300.829096}, "enrichment-pipeline": {"error": "Cannot connect to host homeiq-enrichment:8002 ssl:default [Name does not resolve]"}, "log-aggregator": {"healthy": true, "status": "healthy", "uptime_seconds": 0}, "smart-meter-service": {"healthy": true, "status": "healthy", "uptime_seconds": 4299.215434}, "sports-data": {"healthy": true, "status": "healthy", "uptime_seconds": 0}, "weather-api": {"error": "Cannot connect to host homeiq-weather-api:8001 ssl:default [Connection refused]"}, "websocket-ingestion": {"error": "'coroutine' object is not subscriptable"}}, "period": "1h", "source": "services-fallback", "timestamp": "2025-10-20T17:02:36.919069", "trends": {"admin-api": {}, "air-quality-service": {}, "calendar-service": {}, "carbon-intensity-service": {}, "data-api": {}, "data-retention": {}, "electricity-pricing-service": {}, "energy-correlator": {}, "enrichment-pipeline": {}, "log-aggregator": {}, "smart-meter-service": {}, "sports-data": {}, "weather-api": {}}}

      75 |     // Verify all responses are valid
      76 |     results.forEach(data => {
    > 77 |       expect(data).toHaveProperty('total_events');
         |                    ^
      78 |       expect(data).toHaveProperty('events_per_minute');
      79 |     });
      80 |     
        at forEach (C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:77:20)
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:76:13

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-eb6bc-PI-performs-well-under-load-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-eb6bc-PI-performs-well-under-load-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-eb6bc-PI-performs-well-under-load-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-eb6bc-PI-performs-well-under-load-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Performance Tests › Events API handles pagination efficiently" classname="performance.spec.ts" time="0.214">
<failure message="performance.spec.ts:84:7 Events API handles pagination efficiently" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:84:7 › Performance Tests › Events API handles pagination efficiently 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      89 |       
      90 |       const response = await page.request.get(`http://localhost:8003/api/v1/events/recent?limit=${pageSize}`);
    > 91 |       expect(response.status()).toBe(200);
         |                                 ^
      92 |       
      93 |       const data = await response.json();
      94 |       expect(Array.isArray(data)).toBe(true);
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:91:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-e66ee-dles-pagination-efficiently-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-e66ee-dles-pagination-efficiently-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-e66ee-dles-pagination-efficiently-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-e66ee-dles-pagination-efficiently-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Performance Tests › Dashboard real-time updates perform well" classname="performance.spec.ts" time="0.816">
<failure message="performance.spec.ts:106:7 Dashboard real-time updates perform well" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:106:7 › Performance Tests › Dashboard real-time updates perform well 

    Error: page.waitForSelector: Target page, context or browser has been closed
    Call log:
      - waiting for locator('[data-testid="dashboard"]') to be visible


      106 |   test('Dashboard real-time updates perform well', async ({ page }) => {
      107 |     await page.goto('http://localhost:3000');
    > 108 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
          |                ^
      109 |     
      110 |     // Measure time for initial data load
      111 |     const initialLoadStart = Date.now();
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:108:16
]]>
</failure>
</testcase>
<testcase name="Performance Tests › Navigation between screens is fast" classname="performance.spec.ts" time="3.814">
<failure message="performance.spec.ts:132:7 Navigation between screens is fast" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:132:7 › Performance Tests › Navigation between screens is fast 

    Error: page.waitForSelector: Target page, context or browser has been closed
    Call log:
      - waiting for locator('[data-testid="dashboard"]') to be visible


      132 |   test('Navigation between screens is fast', async ({ page }) => {
      133 |     await page.goto('http://localhost:3000');
    > 134 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
          |                ^
      135 |     
      136 |     // Test navigation to monitoring
      137 |     const monitoringStart = Date.now();
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:134:16
]]>
</failure>
</testcase>
<testcase name="Performance Tests › Chart rendering and interaction performance" classname="performance.spec.ts" time="0.924">
<failure message="performance.spec.ts:163:7 Chart rendering and interaction performance" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:163:7 › Performance Tests › Chart rendering and interaction performance 

    Error: page.waitForSelector: Target page, context or browser has been closed
    Call log:
      - waiting for locator('[data-testid="statistics-chart"]') to be visible


      163 |   test('Chart rendering and interaction performance', async ({ page }) => {
      164 |     await page.goto('http://localhost:3000');
    > 165 |     await page.waitForSelector('[data-testid="statistics-chart"]', { timeout: 15000 });
          |                ^
      166 |     
      167 |     // Measure chart rendering time
      168 |     const chartRenderStart = Date.now();
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:165:16
]]>
</failure>
</testcase>
<testcase name="Performance Tests › Large datasets are handled efficiently" classname="performance.spec.ts" time="0.536">
<failure message="performance.spec.ts:191:7 Large datasets are handled efficiently" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:191:7 › Performance Tests › Large datasets are handled efficiently 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      197 |       
      198 |       const response = await page.request.get(`http://localhost:8003/api/v1/events/recent?limit=${limit}`);
    > 199 |       expect(response.status()).toBe(200);
          |                                 ^
      200 |       
      201 |       const data = await response.json();
      202 |       expect(Array.isArray(data)).toBe(true);
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:199:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-01e26-ets-are-handled-efficiently-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-01e26-ets-are-handled-efficiently-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-01e26-ets-are-handled-efficiently-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-01e26-ets-are-handled-efficiently-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Performance Tests › Memory usage remains stable during extended use" classname="performance.spec.ts" time="0.686">
<failure message="performance.spec.ts:214:7 Memory usage remains stable during extended use" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:214:7 › Performance Tests › Memory usage remains stable during extended use 

    Error: page.waitForSelector: Target page, context or browser has been closed
    Call log:
      - waiting for locator('[data-testid="dashboard"]') to be visible


      214 |   test('Memory usage remains stable during extended use', async ({ page }) => {
      215 |     await page.goto('http://localhost:3000');
    > 216 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
          |                ^
      217 |     
      218 |     // Get initial memory usage
      219 |     const initialMemory = await page.evaluate(() => {
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:216:16
]]>
</failure>
</testcase>
<testcase name="Performance Tests › Concurrent user simulation performs well" classname="performance.spec.ts" time="0.156">
<failure message="performance.spec.ts:254:7 Concurrent user simulation performs well" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:254:7 › Performance Tests › Concurrent user simulation performs well 

    Error: browserContext.newPage: Target page, context or browser has been closed
    Browser logs:

    <launching> C:\Users\tappt\AppData\Local\ms-playwright\chromium_headless_shell-1194\chrome-win\headless_shell.exe --disable-field-trial-config --disable-background-networking --disable-background-timer-throttling --disable-backgrounding-occluded-windows --disable-back-forward-cache --disable-breakpad --disable-client-side-phishing-detection --disable-component-extensions-with-background-pages --disable-component-update --no-default-browser-check --disable-default-apps --disable-dev-shm-usage --disable-extensions --disable-features=AcceptCHFrame,AvoidUnnecessaryBeforeUnloadCheckSync,DestroyProfileOnBrowserClose,DialMediaRouteProvider,GlobalMediaControls,HttpsUpgrades,LensOverlay,MediaRouter,PaintHolding,ThirdPartyStoragePartitioning,Translate,AutoDeElevate,RenderDocument --enable-features=CDPScreenshotNewSurface --allow-pre-commit-input --disable-hang-monitor --disable-ipc-flooding-protection --disable-popup-blocking --disable-prompt-on-repost --disable-renderer-backgrounding --force-color-profile=srgb --metrics-recording-only --no-first-run --password-store=basic --use-mock-keychain --no-service-autorun --export-tagged-pdf --disable-search-engine-choice-screen --unsafely-disable-devtools-self-xss-warnings --edge-skip-compat-layer-relaunch --enable-automation --headless --hide-scrollbars --mute-audio --blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4 --no-sandbox --no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --disable-gpu --no-first-run --no-zygote --single-process --user-data-dir=C:\Users\tappt\AppData\Local\Temp\playwright_chromiumdev_profile-miNk55 --remote-debugging-pipe --no-startup-window
    <launched> pid=42824

      259 |     for (let i = 0; i < concurrentUsers; i++) {
      260 |       const context = await browser.newContext();
    > 261 |       const page = await context.newPage();
          |                                  ^
      262 |       pages.push(page);
      263 |     }
      264 |     
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:261:34
]]>
</failure>
</testcase>
<testcase name="Performance Tests › WebSocket connection and message handling performance" classname="performance.spec.ts" time="4.486">
<failure message="performance.spec.ts:297:7 WebSocket connection and message handling performance" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:297:7 › Performance Tests › WebSocket connection and message handling performance 

    Error: page.waitForSelector: Target page, context or browser has been closed
    Call log:
      - waiting for locator('[data-testid="websocket-status"]') to be visible


      297 |   test('WebSocket connection and message handling performance', async ({ page }) => {
      298 |     await page.goto('http://localhost:3000');
    > 299 |     await page.waitForSelector('[data-testid="websocket-status"]', { timeout: 10000 });
          |                ^
      300 |     
      301 |     // Measure WebSocket connection time
      302 |     const connectionStart = Date.now();
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:299:16
]]>
</failure>
</testcase>
<testcase name="Performance Tests › Database query performance is acceptable" classname="performance.spec.ts" time="0.444">
<failure message="performance.spec.ts:335:7 Database query performance is acceptable" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:335:7 › Performance Tests › Database query performance is acceptable 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      348 |       
      349 |       const response = await page.request.get(query);
    > 350 |       expect(response.status()).toBe(200);
          |                                 ^
      351 |       
      352 |       const data = await response.json();
      353 |       expect(data).toBeDefined();
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:350:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-d23f7-y-performance-is-acceptable-docker-chromium\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\performance-Performance-Te-d23f7-y-performance-is-acceptable-docker-chromium\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-d23f7-y-performance-is-acceptable-docker-chromium\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\performance-Performance-Te-d23f7-y-performance-is-acceptable-docker-chromium\video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Performance Tests › Mobile performance is acceptable" classname="performance.spec.ts" time="0.977">
<failure message="performance.spec.ts:364:7 Mobile performance is acceptable" type="FAILURE">
<![CDATA[  [docker-chromium] › performance.spec.ts:364:7 › Performance Tests › Mobile performance is acceptable 

    Error: page.waitForSelector: Target page, context or browser has been closed
    Call log:
      - waiting for locator('[data-testid="mobile-dashboard"]') to be visible


      369 |     
      370 |     await page.goto('http://localhost:3000');
    > 371 |     await page.waitForSelector('[data-testid="mobile-dashboard"]', { timeout: 15000 });
          |                ^
      372 |     
      373 |     const mobileLoadTime = Date.now() - startTime;
      374 |     
        at C:\cursor\ha-ingestor\tests\e2e\performance.spec.ts:371:16
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="settings-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="11" failures="11" skipped="0" time="24.383" errors="0">
<testcase name="Settings Screen Tests › Settings screen loads correctly" classname="settings-screen.spec.ts" time="0.912">
<failure message="settings-screen.spec.ts:14:7 Settings screen loads correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:14:7 › Settings Screen Tests › Settings screen loads correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › Settings navigation tabs work correctly" classname="settings-screen.spec.ts" time="11.728">
<failure message="settings-screen.spec.ts:27:7 Settings navigation tabs work correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:27:7 › Settings Screen Tests › Settings navigation tabs work correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › General settings can be modified and saved" classname="settings-screen.spec.ts" time="1.333">
<failure message="settings-screen.spec.ts:53:7 General settings can be modified and saved" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:53:7 › Settings Screen Tests › General settings can be modified and saved 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › API configuration settings work correctly" classname="settings-screen.spec.ts" time="1.664">
<failure message="settings-screen.spec.ts:84:7 API configuration settings work correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:84:7 › Settings Screen Tests › API configuration settings work correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › Notification settings can be configured" classname="settings-screen.spec.ts" time="1.088">
<failure message="settings-screen.spec.ts:117:7 Notification settings can be configured" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:117:7 › Settings Screen Tests › Notification settings can be configured 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › Data retention settings work correctly" classname="settings-screen.spec.ts" time="1.287">
<failure message="settings-screen.spec.ts:150:7 Data retention settings work correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:150:7 › Settings Screen Tests › Data retention settings work correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › Security settings work correctly" classname="settings-screen.spec.ts" time="1.63">
<failure message="settings-screen.spec.ts:186:7 Security settings work correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:186:7 › Settings Screen Tests › Security settings work correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › Configuration backup and restore works" classname="settings-screen.spec.ts" time="0.915">
<failure message="settings-screen.spec.ts:219:7 Configuration backup and restore works" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:219:7 › Settings Screen Tests › Configuration backup and restore works 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › Settings validation works correctly" classname="settings-screen.spec.ts" time="1.169">
<failure message="settings-screen.spec.ts:261:7 Settings validation works correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:261:7 › Settings Screen Tests › Settings validation works correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › Settings screen is responsive on mobile" classname="settings-screen.spec.ts" time="1.25">
<failure message="settings-screen.spec.ts:285:7 Settings screen is responsive on mobile" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:285:7 › Settings Screen Tests › Settings screen is responsive on mobile 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Settings Screen Tests › Settings reset to defaults works" classname="settings-screen.spec.ts" time="1.407">
<failure message="settings-screen.spec.ts:305:7 Settings reset to defaults works" type="FAILURE">
<![CDATA[  [docker-chromium] › settings-screen.spec.ts:305:7 › Settings Screen Tests › Settings reset to defaults works 

    Error: page.waitForLoadState: Target page, context or browser has been closed

       9 |   test.beforeEach(async ({ page }) => {
      10 |     await page.goto('http://localhost:3000/settings');
    > 11 |     await page.waitForLoadState('networkidle');
         |                ^
      12 |   });
      13 |
      14 |   test('Settings screen loads correctly', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\settings-screen.spec.ts:11:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="system-health.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="6" failures="6" skipped="0" time="7.366" errors="0">
<testcase name="System Health Tests › All services are healthy and responding" classname="system-health.spec.ts" time="1.163">
<failure message="system-health.spec.ts:15:7 All services are healthy and responding" type="FAILURE">
<![CDATA[  [docker-chromium] › system-health.spec.ts:15:7 › System Health Tests › All services are healthy and responding 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('All services are healthy and responding', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\system-health.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="System Health Tests › Health dashboard displays system status correctly" classname="system-health.spec.ts" time="1.429">
<failure message="system-health.spec.ts:37:7 Health dashboard displays system status correctly" type="FAILURE">
<![CDATA[  [docker-chromium] › system-health.spec.ts:37:7 › System Health Tests › Health dashboard displays system status correctly 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('All services are healthy and responding', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\system-health.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="System Health Tests › Statistics endpoint returns valid data" classname="system-health.spec.ts" time="1.409">
<failure message="system-health.spec.ts:53:7 Statistics endpoint returns valid data" type="FAILURE">
<![CDATA[  [docker-chromium] › system-health.spec.ts:53:7 › System Health Tests › Statistics endpoint returns valid data 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('All services are healthy and responding', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\system-health.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="System Health Tests › Recent events endpoint returns data" classname="system-health.spec.ts" time="1.269">
<failure message="system-health.spec.ts:64:7 Recent events endpoint returns data" type="FAILURE">
<![CDATA[  [docker-chromium] › system-health.spec.ts:64:7 › System Health Tests › Recent events endpoint returns data 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('All services are healthy and responding', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\system-health.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="System Health Tests › WebSocket connection establishes successfully" classname="system-health.spec.ts" time="1.043">
<failure message="system-health.spec.ts:80:7 WebSocket connection establishes successfully" type="FAILURE">
<![CDATA[  [docker-chromium] › system-health.spec.ts:80:7 › System Health Tests › WebSocket connection establishes successfully 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('All services are healthy and responding', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\system-health.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="System Health Tests › Error handling works correctly when services are down" classname="system-health.spec.ts" time="1.053">
<failure message="system-health.spec.ts:91:7 Error handling works correctly when services are down" type="FAILURE">
<![CDATA[  [docker-chromium] › system-health.spec.ts:91:7 › System Health Tests › Error handling works correctly when services are down 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test('All services are healthy and responding', async ({ page }) => {
        at C:\cursor\ha-ingestor\tests\e2e\system-health.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="user-journey-complete.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="14" failures="14" skipped="0" time="31.611" errors="0">
<testcase name="Complete User Journey Tests › New User Onboarding Journey › First-time user dashboard exploration" classname="user-journey-complete.spec.ts" time="5.925">
<failure message="user-journey-complete.spec.ts:17:9 First-time user dashboard exploration" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:17:9 › Complete User Journey Tests › New User Onboarding Journey › First-time user dashboard exploration 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › New User Onboarding Journey › User discovers system capabilities" classname="user-journey-complete.spec.ts" time="1.455">
<failure message="user-journey-complete.spec.ts:51:9 User discovers system capabilities" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:51:9 › Complete User Journey Tests › New User Onboarding Journey › User discovers system capabilities 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin monitors system health and performance" classname="user-journey-complete.spec.ts" time="1.759">
<failure message="user-journey-complete.spec.ts:78:9 Admin monitors system health and performance" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:78:9 › Complete User Journey Tests › System Administrator Journey › Admin monitors system health and performance 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin configures system settings" classname="user-journey-complete.spec.ts" time="1.57">
<failure message="user-journey-complete.spec.ts:109:9 Admin configures system settings" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:109:9 › Complete User Journey Tests › System Administrator Journey › Admin configures system settings 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin investigates system issues" classname="user-journey-complete.spec.ts" time="1.77">
<failure message="user-journey-complete.spec.ts:140:9 Admin investigates system issues" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:140:9 › Complete User Journey Tests › System Administrator Journey › Admin investigates system issues 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst explores event data and trends" classname="user-journey-complete.spec.ts" time="2.129">
<failure message="user-journey-complete.spec.ts:169:9 Analyst explores event data and trends" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:169:9 › Complete User Journey Tests › Data Analyst Journey › Analyst explores event data and trends 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst monitors data flow and processing" classname="user-journey-complete.spec.ts" time="1.14">
<failure message="user-journey-complete.spec.ts:194:9 Analyst monitors data flow and processing" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:194:9 › Complete User Journey Tests › Data Analyst Journey › Analyst monitors data flow and processing 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › Mobile User Journey › Mobile user navigates system on small screen" classname="user-journey-complete.spec.ts" time="2.389">
<failure message="user-journey-complete.spec.ts:220:9 Mobile user navigates system on small screen" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:220:9 › Complete User Journey Tests › Mobile User Journey › Mobile user navigates system on small screen 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user performs rapid system operations" classname="user-journey-complete.spec.ts" time="1.999">
<failure message="user-journey-complete.spec.ts:254:9 Power user performs rapid system operations" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:254:9 › Complete User Journey Tests › Power User Journey › Power user performs rapid system operations 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user tests system under load" classname="user-journey-complete.spec.ts" time="1.892">
<failure message="user-journey-complete.spec.ts:284:9 Power user tests system under load" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:284:9 › Complete User Journey Tests › Power User Journey › Power user tests system under load 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User recovers from system errors gracefully" classname="user-journey-complete.spec.ts" time="2.912">
<failure message="user-journey-complete.spec.ts:313:9 User recovers from system errors gracefully" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:313:9 › Complete User Journey Tests › Error Recovery Journey › User recovers from system errors gracefully 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User continues working despite partial failures" classname="user-journey-complete.spec.ts" time="2.981">
<failure message="user-journey-complete.spec.ts:340:9 User continues working despite partial failures" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:340:9 › Complete User Journey Tests › Error Recovery Journey › User continues working despite partial failures 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › Screen reader user navigates system" classname="user-journey-complete.spec.ts" time="1.739">
<failure message="user-journey-complete.spec.ts:365:9 Screen reader user navigates system" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:365:9 › Complete User Journey Tests › Accessibility Journey › Screen reader user navigates system 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › High contrast user views system" classname="user-journey-complete.spec.ts" time="1.951">
<failure message="user-journey-complete.spec.ts:391:9 High contrast user views system" type="FAILURE">
<![CDATA[  [docker-chromium] › user-journey-complete.spec.ts:391:9 › Complete User Journey Tests › Accessibility Journey › High contrast user views system 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      10 |     // Navigate to dashboard
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('New User Onboarding Journey', () => {
        at C:\cursor\ha-ingestor\tests\e2e\user-journey-complete.spec.ts:12:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="visual-regression.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-chromium" tests="13" failures="13" skipped="0" time="27.07" errors="0">
<testcase name="Visual Regression Tests › Dashboard screen visual consistency" classname="visual-regression.spec.ts" time="2.676">
<failure message="visual-regression.spec.ts:14:7 Dashboard screen visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:14:7 › Visual Regression Tests › Dashboard screen visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      14 |   test('Dashboard screen visual consistency', async ({ page }) => {
      15 |     await page.goto('http://localhost:3000');
    > 16 |     await page.waitForLoadState('networkidle');
         |                ^
      17 |     
      18 |     // Wait for dashboard to fully load
      19 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:16:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Monitoring screen visual consistency" classname="visual-regression.spec.ts" time="7.832">
<failure message="visual-regression.spec.ts:42:7 Monitoring screen visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:42:7 › Visual Regression Tests › Monitoring screen visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      42 |   test('Monitoring screen visual consistency', async ({ page }) => {
      43 |     await page.goto('http://localhost:3000/monitoring');
    > 44 |     await page.waitForLoadState('networkidle');
         |                ^
      45 |     
      46 |     // Wait for monitoring screen to fully load
      47 |     await page.waitForSelector('[data-testid="monitoring-screen"]', { timeout: 15000 });
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:44:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Settings screen visual consistency" classname="visual-regression.spec.ts" time="1.521">
<failure message="visual-regression.spec.ts:66:7 Settings screen visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:66:7 › Visual Regression Tests › Settings screen visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      66 |   test('Settings screen visual consistency', async ({ page }) => {
      67 |     await page.goto('http://localhost:3000/settings');
    > 68 |     await page.waitForLoadState('networkidle');
         |                ^
      69 |     
      70 |     // Wait for settings screen to fully load
      71 |     await page.waitForSelector('[data-testid="settings-screen"]', { timeout: 15000 });
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:68:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Navigation component visual consistency" classname="visual-regression.spec.ts" time="1.656">
<failure message="visual-regression.spec.ts:93:7 Navigation component visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:93:7 › Visual Regression Tests › Navigation component visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      93 |   test('Navigation component visual consistency', async ({ page }) => {
      94 |     await page.goto('http://localhost:3000');
    > 95 |     await page.waitForLoadState('networkidle');
         |                ^
      96 |     
      97 |     // Wait for navigation to load
      98 |     await page.waitForSelector('[data-testid="navigation"]');
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:95:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Health cards visual consistency" classname="visual-regression.spec.ts" time="1.573">
<failure message="visual-regression.spec.ts:118:7 Health cards visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:118:7 › Visual Regression Tests › Health cards visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      118 |   test('Health cards visual consistency', async ({ page }) => {
      119 |     await page.goto('http://localhost:3000');
    > 120 |     await page.waitForLoadState('networkidle');
          |                ^
      121 |     
      122 |     // Wait for health cards to load
      123 |     await page.waitForSelector('[data-testid="health-card"]', { timeout: 15000 });
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:120:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Mobile responsive design visual consistency" classname="visual-regression.spec.ts" time="1.976">
<failure message="visual-regression.spec.ts:143:7 Mobile responsive design visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:143:7 › Visual Regression Tests › Mobile responsive design visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      146 |     
      147 |     await page.goto('http://localhost:3000');
    > 148 |     await page.waitForLoadState('networkidle');
          |                ^
      149 |     
      150 |     // Wait for mobile dashboard to load
      151 |     await page.waitForSelector('[data-testid="mobile-dashboard"]', { timeout: 15000 });
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:148:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Tablet responsive design visual consistency" classname="visual-regression.spec.ts" time="0.635">
<failure message="visual-regression.spec.ts:178:7 Tablet responsive design visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:178:7 › Visual Regression Tests › Tablet responsive design visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      181 |     
      182 |     await page.goto('http://localhost:3000');
    > 183 |     await page.waitForLoadState('networkidle');
          |                ^
      184 |     
      185 |     // Wait for dashboard to load
      186 |     await page.waitForSelector('[data-testid="dashboard"]', { timeout: 15000 });
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:183:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Dark theme visual consistency" classname="visual-regression.spec.ts" time="1.863">
<failure message="visual-regression.spec.ts:199:7 Dark theme visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:199:7 › Visual Regression Tests › Dark theme visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      199 |   test('Dark theme visual consistency', async ({ page }) => {
      200 |     await page.goto('http://localhost:3000');
    > 201 |     await page.waitForLoadState('networkidle');
          |                ^
      202 |     
      203 |     // Switch to dark theme
      204 |     const themeToggle = page.locator('[data-testid="theme-toggle"]');
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:201:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Loading states visual consistency" classname="visual-regression.spec.ts" time="1.781">
<failure message="visual-regression.spec.ts:224:7 Loading states visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:224:7 › Visual Regression Tests › Loading states visual consistency 

    Error: page.waitForSelector: Target page, context or browser has been closed
    Call log:
      - waiting for locator('[data-testid="loading-skeleton"]') to be visible


      232 |     
      233 |     // Wait for loading state to appear
    > 234 |     await page.waitForSelector('[data-testid="loading-skeleton"]', { timeout: 5000 });
          |                ^
      235 |     
      236 |     // Take screenshot of loading state
      237 |     await expect(page).toHaveScreenshot('loading-state.png');
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:234:16
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Error states visual consistency" classname="visual-regression.spec.ts" time="1.618">
<failure message="visual-regression.spec.ts:246:7 Error states visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:246:7 › Visual Regression Tests › Error states visual consistency 

    Error: page.waitForSelector: Target page, context or browser has been closed
    Call log:
      - waiting for locator('[data-testid="error-state"]') to be visible


      251 |     
      252 |     // Wait for error state to appear
    > 253 |     await page.waitForSelector('[data-testid="error-state"]', { timeout: 10000 });
          |                ^
      254 |     
      255 |     // Take screenshot of error state
      256 |     await expect(page).toHaveScreenshot('error-state.png');
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:253:16
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Modal dialogs visual consistency" classname="visual-regression.spec.ts" time="1.594">
<failure message="visual-regression.spec.ts:263:7 Modal dialogs visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:263:7 › Visual Regression Tests › Modal dialogs visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      263 |   test('Modal dialogs visual consistency', async ({ page }) => {
      264 |     await page.goto('http://localhost:3000');
    > 265 |     await page.waitForLoadState('networkidle');
          |                ^
      266 |     
      267 |     // Open settings modal (if available)
      268 |     const settingsButton = page.locator('[data-testid="open-settings-modal"]');
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:265:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Form elements visual consistency" classname="visual-regression.spec.ts" time="0.733">
<failure message="visual-regression.spec.ts:297:7 Form elements visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:297:7 › Visual Regression Tests › Form elements visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      297 |   test('Form elements visual consistency', async ({ page }) => {
      298 |     await page.goto('http://localhost:3000/settings');
    > 299 |     await page.waitForLoadState('networkidle');
          |                ^
      300 |     
      301 |     // Navigate to API configuration
      302 |     await page.click('[data-testid="settings-tab-api-config"]');
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:299:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
<testcase name="Visual Regression Tests › Chart components visual consistency" classname="visual-regression.spec.ts" time="1.612">
<failure message="visual-regression.spec.ts:321:7 Chart components visual consistency" type="FAILURE">
<![CDATA[  [docker-chromium] › visual-regression.spec.ts:321:7 › Visual Regression Tests › Chart components visual consistency 

    Error: page.waitForLoadState: Target page, context or browser has been closed

      321 |   test('Chart components visual consistency', async ({ page }) => {
      322 |     await page.goto('http://localhost:3000');
    > 323 |     await page.waitForLoadState('networkidle');
          |                ^
      324 |     
      325 |     // Wait for chart to load
      326 |     await page.waitForSelector('[data-testid="statistics-chart"]', { timeout: 15000 });
        at C:\cursor\ha-ingestor\tests\e2e\visual-regression.spec.ts:323:16

    Error: browserContext.close: Target page, context or browser has been closed
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="api-endpoints.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="38" failures="24" skipped="5" time="1066.664" errors="0">
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/health - Complete health status" classname="api-endpoints.spec.ts" time="33.625">
<failure message="api-endpoints.spec.ts:17:9 GET /api/v1/health - Complete health status" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:17:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/health - Complete health status 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-26a9d-th---Complete-health-status-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-26a9d-th---Complete-health-status-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-26a9d-th---Complete-health-status-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-26a9d-th---Complete-health-status-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-26a9d-th---Complete-health-status-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-26a9d-th---Complete-health-status-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats - System statistics" classname="api-endpoints.spec.ts" time="33.772">
<failure message="api-endpoints.spec.ts:58:9 GET /api/v1/stats - System statistics" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:58:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats - System statistics 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-2eb30-1-stats---System-statistics-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-2eb30-1-stats---System-statistics-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-2eb30-1-stats---System-statistics-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-2eb30-1-stats---System-statistics-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-2eb30-1-stats---System-statistics-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-2eb30-1-stats---System-statistics-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with period parameter" classname="api-endpoints.spec.ts" time="35.72">
<failure message="api-endpoints.spec.ts:77:9 GET /api/v1/stats with period parameter" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:77:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with period parameter 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-4c91a-stats-with-period-parameter-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-4c91a-stats-with-period-parameter-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-4c91a-stats-with-period-parameter-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-4c91a-stats-with-period-parameter-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-4c91a-stats-with-period-parameter-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-4c91a-stats-with-period-parameter-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with service parameter" classname="api-endpoints.spec.ts" time="36.086">
<failure message="api-endpoints.spec.ts:85:9 GET /api/v1/stats with service parameter" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:85:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with service parameter 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-2b325-tats-with-service-parameter-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-2b325-tats-with-service-parameter-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-2b325-tats-with-service-parameter-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-2b325-tats-with-service-parameter-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-2b325-tats-with-service-parameter-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-2b325-tats-with-service-parameter-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats/services - Service-specific statistics" classname="api-endpoints.spec.ts" time="38.225">
<failure message="api-endpoints.spec.ts:93:9 GET /api/v1/stats/services - Service-specific statistics" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:93:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats/services - Service-specific statistics 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-92843-Service-specific-statistics-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-92843-Service-specific-statistics-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-92843-Service-specific-statistics-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-92843-Service-specific-statistics-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-92843-Service-specific-statistics-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-92843-Service-specific-statistics-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/config - System configuration" classname="api-endpoints.spec.ts" time="36.27">
<failure message="api-endpoints.spec.ts:101:9 GET /api/v1/config - System configuration" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:101:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/config - System configuration 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-f333d-nfig---System-configuration-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-f333d-nfig---System-configuration-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-f333d-nfig---System-configuration-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-f333d-nfig---System-configuration-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-f333d-nfig---System-configuration-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-f333d-nfig---System-configuration-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › PUT /api/v1/config - Update configuration" classname="api-endpoints.spec.ts" time="38.911">
<failure message="api-endpoints.spec.ts:117:9 PUT /api/v1/config - Update configuration" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:117:9 › API Endpoints Tests › Admin API Endpoints › PUT /api/v1/config - Update configuration 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-92cc6-nfig---Update-configuration-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-92cc6-nfig---Update-configuration-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-92cc6-nfig---Update-configuration-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-92cc6-nfig---Update-configuration-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-92cc6-nfig---Update-configuration-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-92cc6-nfig---Update-configuration-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events - Recent events" classname="api-endpoints.spec.ts" time="38.413">
<failure message="api-endpoints.spec.ts:143:9 GET /api/v1/events - Recent events" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:143:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events - Recent events 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-7a708-i-v1-events---Recent-events-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-7a708-i-v1-events---Recent-events-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-7a708-i-v1-events---Recent-events-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-7a708-i-v1-events---Recent-events-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-7a708-i-v1-events---Recent-events-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-7a708-i-v1-events---Recent-events-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with query parameters" classname="api-endpoints.spec.ts" time="34.898">
<failure message="api-endpoints.spec.ts:159:9 GET /api/v1/events with query parameters" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:159:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with query parameters 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-4af38-vents-with-query-parameters-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-4af38-vents-with-query-parameters-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-4af38-vents-with-query-parameters-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-4af38-vents-with-query-parameters-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-4af38-vents-with-query-parameters-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-4af38-vents-with-query-parameters-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with filters" classname="api-endpoints.spec.ts" time="10.888">
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/{event_id} - Specific event" classname="api-endpoints.spec.ts" time="8.618">
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › POST /api/v1/events/search - Search events" classname="api-endpoints.spec.ts" time="9.239">
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats - Event statistics" classname="api-endpoints.spec.ts" time="40.415">
<failure message="api-endpoints.spec.ts:212:9 GET /api/v1/events/stats - Event statistics" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:212:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats - Event statistics 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-822e1-ts-stats---Event-statistics-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-822e1-ts-stats---Event-statistics-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-822e1-ts-stats---Event-statistics-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-822e1-ts-stats---Event-statistics-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-822e1-ts-stats---Event-statistics-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-822e1-ts-stats---Event-statistics-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats with period parameter" classname="api-endpoints.spec.ts" time="5.805">
<failure message="api-endpoints.spec.ts:220:9 GET /api/v1/events/stats with period parameter" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:220:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats with period parameter 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      220 |     test('GET /api/v1/events/stats with period parameter', async ({ page }) => {
      221 |       const response = await page.request.get('http://localhost:8003/api/v1/events/stats?period=24h');
    > 222 |       expect(response.status()).toBe(200);
          |                                 ^
      223 |       
      224 |       const statsData = await response.json();
      225 |       expect(typeof statsData).toBe('object');
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:222:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-b0d15-stats-with-period-parameter-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-b0d15-stats-with-period-parameter-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-b0d15-stats-with-period-parameter-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-b0d15-stats-with-period-parameter-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-b0d15-stats-with-period-parameter-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-b0d15-stats-with-period-parameter-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities - Active entities" classname="api-endpoints.spec.ts" time="33.534">
<failure message="api-endpoints.spec.ts:228:9 GET /api/v1/events/entities - Active entities" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:228:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities - Active entities 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-74890--entities---Active-entities-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-74890--entities---Active-entities-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-74890--entities---Active-entities-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-74890--entities---Active-entities-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-74890--entities---Active-entities-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-74890--entities---Active-entities-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities with limit" classname="api-endpoints.spec.ts" time="40.475">
<failure message="api-endpoints.spec.ts:236:9 GET /api/v1/events/entities with limit" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:236:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities with limit 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-6113a--events-entities-with-limit-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-6113a--events-entities-with-limit-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-6113a--events-entities-with-limit-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-6113a--events-entities-with-limit-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-6113a--events-entities-with-limit-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-6113a--events-entities-with-limit-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/types - Event types" classname="api-endpoints.spec.ts" time="36.308">
<failure message="api-endpoints.spec.ts:245:9 GET /api/v1/events/types - Event types" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:245:9 › API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/types - Event types 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-3888f--events-types---Event-types-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-3888f--events-types---Event-types-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-3888f--events-types---Event-types-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-3888f--events-types---Event-types-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-3888f--events-types---Event-types-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-3888f--events-types---Event-types-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › GET /health - WebSocket service health" classname="api-endpoints.spec.ts" time="8.68">
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › WebSocket connection endpoint" classname="api-endpoints.spec.ts" time="39.625">
<failure message="api-endpoints.spec.ts:266:9 WebSocket connection endpoint" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:266:9 › API Endpoints Tests › WebSocket Ingestion Service Endpoints › WebSocket connection endpoint 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-0d033-bSocket-connection-endpoint-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-0d033-bSocket-connection-endpoint-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-0d033-bSocket-connection-endpoint-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-0d033-bSocket-connection-endpoint-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-0d033-bSocket-connection-endpoint-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-0d033-bSocket-connection-endpoint-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Enrichment Pipeline Service Endpoints › GET /health - Enrichment service health" classname="api-endpoints.spec.ts" time="40.877">
<failure message="api-endpoints.spec.ts:301:9 GET /health - Enrichment service health" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:301:9 › API Endpoints Tests › Enrichment Pipeline Service Endpoints › GET /health - Enrichment service health 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-abac9---Enrichment-service-health-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-abac9---Enrichment-service-health-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-abac9---Enrichment-service-health-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-abac9---Enrichment-service-health-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-abac9---Enrichment-service-health-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-abac9---Enrichment-service-health-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /health - Data retention service health" classname="api-endpoints.spec.ts" time="5.458">
<failure message="api-endpoints.spec.ts:325:9 GET /health - Data retention service health" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:325:9 › API Endpoints Tests › Data Retention Service Endpoints › GET /health - Data retention service health 

    Error: expect(received).toHaveProperty(path)

    Expected path: "service"
    Received path: []

    Received value: {"active_alerts": 0, "alerts": [], "service_status": {"backup_service": false, "cleanup_service": false, "compression_service": false, "policy_count": 1, "storage_monitor": false}, "status": "healthy", "storage_metrics": null, "timestamp": "2025-10-20T17:05:08.029450"}

      329 |       const healthData = await response.json();
      330 |       expect(healthData).toHaveProperty('status');
    > 331 |       expect(healthData).toHaveProperty('service');
          |                          ^
      332 |       expect(healthData.service).toBe('data-retention');
      333 |     });
      334 |
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:331:26

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-3d037-ta-retention-service-health-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-3d037-ta-retention-service-health-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-3d037-ta-retention-service-health-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-3d037-ta-retention-service-health-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-3d037-ta-retention-service-health-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-3d037-ta-retention-service-health-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /stats - Data retention statistics" classname="api-endpoints.spec.ts" time="41.272">
<failure message="api-endpoints.spec.ts:335:9 GET /stats - Data retention statistics" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:335:9 › API Endpoints Tests › Data Retention Service Endpoints › GET /stats - Data retention statistics 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-5f71b---Data-retention-statistics-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-5f71b---Data-retention-statistics-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-5f71b---Data-retention-statistics-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-5f71b---Data-retention-statistics-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-5f71b---Data-retention-statistics-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-5f71b---Data-retention-statistics-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /health - InfluxDB health" classname="api-endpoints.spec.ts" time="11.02">
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ping - InfluxDB ping" classname="api-endpoints.spec.ts" time="41.15">
<failure message="api-endpoints.spec.ts:365:9 GET /ping - InfluxDB ping" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:365:9 › API Endpoints Tests › InfluxDB Endpoints › GET /ping - InfluxDB ping 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-97632-ts-GET-ping---InfluxDB-ping-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-97632-ts-GET-ping---InfluxDB-ping-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-97632-ts-GET-ping---InfluxDB-ping-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-97632-ts-GET-ping---InfluxDB-ping-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-97632-ts-GET-ping---InfluxDB-ping-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-97632-ts-GET-ping---InfluxDB-ping-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ready - InfluxDB ready check" classname="api-endpoints.spec.ts" time="41.698">
<failure message="api-endpoints.spec.ts:370:9 GET /ready - InfluxDB ready check" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:370:9 › API Endpoints Tests › InfluxDB Endpoints › GET /ready - InfluxDB ready check 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-41664-eady---InfluxDB-ready-check-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-41664-eady---InfluxDB-ready-check-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-41664-eady---InfluxDB-ready-check-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-41664-eady---InfluxDB-ready-check-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-41664-eady---InfluxDB-ready-check-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-41664-eady---InfluxDB-ready-check-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › Weather API Service Endpoints › GET /health - Weather API health" classname="api-endpoints.spec.ts" time="40.423">
<failure message="api-endpoints.spec.ts:378:9 GET /health - Weather API health" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:378:9 › API Endpoints Tests › Weather API Service Endpoints › GET /health - Weather API health 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-f4b89-health---Weather-API-health-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-f4b89-health---Weather-API-health-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-f4b89-health---Weather-API-health-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-f4b89-health---Weather-API-health-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-f4b89-health---Weather-API-health-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-f4b89-health---Weather-API-health-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › 404 error handling" classname="api-endpoints.spec.ts" time="41.051">
<failure message="api-endpoints.spec.ts:391:9 404 error handling" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:391:9 › API Endpoints Tests › API Error Handling › 404 error handling 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-9cb65-Handling-404-error-handling-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-9cb65-Handling-404-error-handling-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-9cb65-Handling-404-error-handling-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-9cb65-Handling-404-error-handling-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-9cb65-Handling-404-error-handling-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-9cb65-Handling-404-error-handling-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Invalid parameter handling" classname="api-endpoints.spec.ts" time="34.439">
<failure message="api-endpoints.spec.ts:396:9 Invalid parameter handling" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:396:9 › API Endpoints Tests › API Error Handling › Invalid parameter handling 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-ce681--Invalid-parameter-handling-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-ce681--Invalid-parameter-handling-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-ce681--Invalid-parameter-handling-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-ce681--Invalid-parameter-handling-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-ce681--Invalid-parameter-handling-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-ce681--Invalid-parameter-handling-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Large limit parameter handling" classname="api-endpoints.spec.ts" time="38.985">
<failure message="api-endpoints.spec.ts:401:9 Large limit parameter handling" type="FAILURE">
<![CDATA[  [docker-firefox] › api-endpoints.spec.ts:401:9 › API Endpoints Tests › API Error Handling › Large limit parameter handling 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      10 |     // Wait for system to be fully deployed
      11 |     await page.goto('http://localhost:3000');
    > 12 |     await page.waitForLoadState('networkidle');
         |                ^
      13 |   });
      14 |
      15 |   test.describe('Admin API Endpoints', () => {
        at C:\cursor\ha-ingestor\tests\e2e\api-endpoints.spec.ts:12:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-a91be-ge-limit-parameter-handling-docker-firefox\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results\api-endpoints-API-Endpoint-a91be-ge-limit-parameter-handling-docker-firefox\video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results\api-endpoints-API-Endpoint-a91be-ge-limit-parameter-handling-docker-firefox\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-a91be-ge-limit-parameter-handling-docker-firefox\test-failed-1.png]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-a91be-ge-limit-parameter-handling-docker-firefox\video.webm]]

[[ATTACHMENT|..\tests\e2e\test-results\api-endpoints-API-Endpoint-a91be-ge-limit-parameter-handling-docker-firefox\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › JSON parsing error detection for all endpoints" classname="api-endpoints.spec.ts" time="16.211">
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Health endpoint response time" classname="api-endpoints.spec.ts" time="9.148">
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Stats endpoint response time" classname="api-endpoints.spec.ts" time="14.924">
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Events endpoint response time" classname="api-endpoints.spec.ts" time="25.273">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Health data structure validation" classname="api-endpoints.spec.ts" time="22.784">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Events data structure validation" classname="api-endpoints.spec.ts" time="4.52">
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Statistics data validation" classname="api-endpoints.spec.ts" time="29.07">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent health requests" classname="api-endpoints.spec.ts" time="24.617">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent stats requests" classname="api-endpoints.spec.ts" time="24.237">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="cross-service-integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="14" failures="0" skipped="14" time="0.156" errors="0">
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › End-to-end data flow from ingestion to dashboard display" classname="cross-service-integration.spec.ts" time="0.152">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Service dependency chain validation" classname="cross-service-integration.spec.ts" time="0.003">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Real-time data synchronization across services" classname="cross-service-integration.spec.ts" time="0.001">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › WebSocket to Admin API communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › Enrichment Pipeline to Admin API communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › InfluxDB to all services communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Event data consistency between services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Statistics consistency across service endpoints" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Health status consistency across all services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › InfluxDB failure propagation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › WebSocket service failure handling" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › Enrichment pipeline failure handling" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Configuration changes propagate across services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Service-specific configuration validation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="dashboard-data-loading.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Dashboard loads without JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Health data loads and displays correctly" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Statistics data loads without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Events data loads without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Real-time updates work without JSON errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › All API endpoints return valid JSON" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › API responses have expected structure" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Detects and reports JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Error states are displayed correctly when APIs fail" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Retry mechanism works correctly" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Dashboard loads within acceptable time limits" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Multiple rapid navigations work without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="dashboard-functionality.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Dashboard Functionality Tests › Main dashboard loads and displays all components" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Navigation works correctly between screens" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Refresh controls work correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Layout switcher changes dashboard layout" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Health cards display correct information" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Statistics chart renders and updates" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Events feed displays recent events" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Mobile responsive design works correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Theme toggle works correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Notification system displays alerts correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="error-handling-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="16" failures="0" skipped="16" time="0" errors="0">
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Detects and handles HTML responses instead of JSON" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles malformed JSON responses gracefully" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles empty JSON responses" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles non-JSON content types" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles complete API service failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles partial API service failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles slow API responses" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles timeout scenarios" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles InfluxDB connection errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles WebSocket connection errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Retry mechanism works after temporary failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Manual retry button works correctly" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Automatic retry with exponential backoff" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Error messages are user-friendly" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Loading states are shown during errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Navigation works during error states" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="frontend-ui-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="31" failures="0" skipped="31" time="0" errors="0">
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Dashboard loads completely with all components" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › System health status displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Health cards show correct information" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Real-time updates work correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Navigation menu works correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › URL routing works correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Browser back/forward navigation works" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Monitoring screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Performance metrics display correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Service monitoring shows all services" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Real-time monitoring updates work" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › General settings are editable" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Service settings display correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Notification settings work" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings save functionality" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles API errors gracefully" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Detects JSON parsing errors in dashboard" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles slow API responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles empty data responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles malformed JSON responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles HTML responses instead of JSON" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Mobile viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Tablet viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Large desktop viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Keyboard navigation works" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Screen reader compatibility" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Color contrast and visual indicators" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Page load performance" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Navigation performance" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Memory usage remains stable" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration-performance-enhanced.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › End-to-end data flow from Home Assistant simulation to dashboard" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Service dependency chain validation" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Real-time data updates across all components" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Weather enrichment integration end-to-end" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Data retention service integration" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › High-volume concurrent API requests" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Large dataset query performance" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Memory usage under continuous load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Dashboard rendering performance under load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › WebSocket connection stability under load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Service restart recovery" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Network interruption recovery" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Partial service failure handling" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Configuration change propagation" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Event data consistency across services" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Statistics accuracy and consistency" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Health status consistency across endpoints" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Integration Tests › Complete data flow from Home Assistant to dashboard" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Service dependency chain works correctly" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Real-time data updates work end-to-end" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Weather data enrichment integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Data retention service integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Admin API provides comprehensive system information" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Error propagation and handling across services" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Configuration changes propagate across services" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › WebSocket real-time updates work in dashboard" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Performance metrics integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Data export integration works end-to-end" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="monitoring-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Monitoring Screen Tests › Monitoring screen loads correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Service monitoring displays all services" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Performance metrics display correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Real-time updates work correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Service details modal opens and displays information" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Alert management displays active alerts" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Log viewer displays service logs" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Export functionality works for monitoring data" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Monitoring screen is responsive on mobile" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Error states are handled gracefully" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="13" failures="0" skipped="13" time="0" errors="0">
<testcase name="Performance Tests › Dashboard loads within acceptable time" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › API endpoints respond within acceptable time" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Statistics API performs well under load" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Events API handles pagination efficiently" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Dashboard real-time updates perform well" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Navigation between screens is fast" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Chart rendering and interaction performance" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Large datasets are handled efficiently" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Memory usage remains stable during extended use" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Concurrent user simulation performs well" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › WebSocket connection and message handling performance" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Database query performance is acceptable" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Mobile performance is acceptable" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Settings Screen Tests › Settings screen loads correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings navigation tabs work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › General settings can be modified and saved" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › API configuration settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Notification settings can be configured" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Data retention settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Security settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Configuration backup and restore works" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings validation works correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings screen is responsive on mobile" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings reset to defaults works" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="system-health.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="System Health Tests › All services are healthy and responding" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Health dashboard displays system status correctly" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Statistics endpoint returns valid data" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Recent events endpoint returns data" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › WebSocket connection establishes successfully" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Error handling works correctly when services are down" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="user-journey-complete.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Complete User Journey Tests › New User Onboarding Journey › First-time user dashboard exploration" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › New User Onboarding Journey › User discovers system capabilities" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin monitors system health and performance" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin configures system settings" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin investigates system issues" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst explores event data and trends" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst monitors data flow and processing" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Mobile User Journey › Mobile user navigates system on small screen" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user performs rapid system operations" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user tests system under load" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User recovers from system errors gracefully" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User continues working despite partial failures" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › Screen reader user navigates system" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › High contrast user views system" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="visual-regression.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-firefox" tests="13" failures="0" skipped="13" time="0" errors="0">
<testcase name="Visual Regression Tests › Dashboard screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Monitoring screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Settings screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Navigation component visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Health cards visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile responsive design visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Tablet responsive design visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Dark theme visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Loading states visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Error states visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Modal dialogs visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Form elements visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Chart components visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="api-endpoints.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="38" failures="0" skipped="38" time="0" errors="0">
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/health - Complete health status" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats - System statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with period parameter" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with service parameter" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats/services - Service-specific statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/config - System configuration" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › PUT /api/v1/config - Update configuration" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events - Recent events" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with query parameters" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with filters" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/{event_id} - Specific event" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › POST /api/v1/events/search - Search events" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats - Event statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats with period parameter" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities - Active entities" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities with limit" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/types - Event types" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › GET /health - WebSocket service health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › WebSocket connection endpoint" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Enrichment Pipeline Service Endpoints › GET /health - Enrichment service health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /health - Data retention service health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /stats - Data retention statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /health - InfluxDB health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ping - InfluxDB ping" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ready - InfluxDB ready check" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Weather API Service Endpoints › GET /health - Weather API health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › 404 error handling" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Invalid parameter handling" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Large limit parameter handling" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › JSON parsing error detection for all endpoints" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Health endpoint response time" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Stats endpoint response time" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Events endpoint response time" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Health data structure validation" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Events data structure validation" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Statistics data validation" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent health requests" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent stats requests" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="cross-service-integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › End-to-end data flow from ingestion to dashboard display" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Service dependency chain validation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Real-time data synchronization across services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › WebSocket to Admin API communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › Enrichment Pipeline to Admin API communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › InfluxDB to all services communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Event data consistency between services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Statistics consistency across service endpoints" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Health status consistency across all services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › InfluxDB failure propagation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › WebSocket service failure handling" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › Enrichment pipeline failure handling" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Configuration changes propagate across services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Service-specific configuration validation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="dashboard-data-loading.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Dashboard loads without JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Health data loads and displays correctly" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Statistics data loads without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Events data loads without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Real-time updates work without JSON errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › All API endpoints return valid JSON" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › API responses have expected structure" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Detects and reports JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Error states are displayed correctly when APIs fail" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Retry mechanism works correctly" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Dashboard loads within acceptable time limits" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Multiple rapid navigations work without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="dashboard-functionality.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Dashboard Functionality Tests › Main dashboard loads and displays all components" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Navigation works correctly between screens" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Refresh controls work correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Layout switcher changes dashboard layout" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Health cards display correct information" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Statistics chart renders and updates" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Events feed displays recent events" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Mobile responsive design works correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Theme toggle works correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Notification system displays alerts correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="error-handling-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="16" failures="0" skipped="16" time="0" errors="0">
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Detects and handles HTML responses instead of JSON" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles malformed JSON responses gracefully" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles empty JSON responses" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles non-JSON content types" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles complete API service failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles partial API service failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles slow API responses" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles timeout scenarios" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles InfluxDB connection errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles WebSocket connection errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Retry mechanism works after temporary failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Manual retry button works correctly" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Automatic retry with exponential backoff" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Error messages are user-friendly" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Loading states are shown during errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Navigation works during error states" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="frontend-ui-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="31" failures="0" skipped="31" time="0" errors="0">
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Dashboard loads completely with all components" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › System health status displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Health cards show correct information" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Real-time updates work correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Navigation menu works correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › URL routing works correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Browser back/forward navigation works" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Monitoring screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Performance metrics display correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Service monitoring shows all services" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Real-time monitoring updates work" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › General settings are editable" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Service settings display correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Notification settings work" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings save functionality" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles API errors gracefully" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Detects JSON parsing errors in dashboard" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles slow API responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles empty data responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles malformed JSON responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles HTML responses instead of JSON" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Mobile viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Tablet viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Large desktop viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Keyboard navigation works" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Screen reader compatibility" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Color contrast and visual indicators" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Page load performance" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Navigation performance" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Memory usage remains stable" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration-performance-enhanced.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › End-to-end data flow from Home Assistant simulation to dashboard" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Service dependency chain validation" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Real-time data updates across all components" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Weather enrichment integration end-to-end" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Data retention service integration" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › High-volume concurrent API requests" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Large dataset query performance" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Memory usage under continuous load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Dashboard rendering performance under load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › WebSocket connection stability under load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Service restart recovery" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Network interruption recovery" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Partial service failure handling" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Configuration change propagation" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Event data consistency across services" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Statistics accuracy and consistency" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Health status consistency across endpoints" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Integration Tests › Complete data flow from Home Assistant to dashboard" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Service dependency chain works correctly" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Real-time data updates work end-to-end" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Weather data enrichment integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Data retention service integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Admin API provides comprehensive system information" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Error propagation and handling across services" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Configuration changes propagate across services" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › WebSocket real-time updates work in dashboard" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Performance metrics integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Data export integration works end-to-end" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="monitoring-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Monitoring Screen Tests › Monitoring screen loads correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Service monitoring displays all services" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Performance metrics display correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Real-time updates work correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Service details modal opens and displays information" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Alert management displays active alerts" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Log viewer displays service logs" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Export functionality works for monitoring data" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Monitoring screen is responsive on mobile" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Error states are handled gracefully" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="13" failures="0" skipped="13" time="0" errors="0">
<testcase name="Performance Tests › Dashboard loads within acceptable time" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › API endpoints respond within acceptable time" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Statistics API performs well under load" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Events API handles pagination efficiently" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Dashboard real-time updates perform well" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Navigation between screens is fast" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Chart rendering and interaction performance" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Large datasets are handled efficiently" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Memory usage remains stable during extended use" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Concurrent user simulation performs well" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › WebSocket connection and message handling performance" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Database query performance is acceptable" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Mobile performance is acceptable" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Settings Screen Tests › Settings screen loads correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings navigation tabs work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › General settings can be modified and saved" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › API configuration settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Notification settings can be configured" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Data retention settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Security settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Configuration backup and restore works" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings validation works correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings screen is responsive on mobile" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings reset to defaults works" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="system-health.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="System Health Tests › All services are healthy and responding" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Health dashboard displays system status correctly" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Statistics endpoint returns valid data" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Recent events endpoint returns data" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › WebSocket connection establishes successfully" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Error handling works correctly when services are down" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="user-journey-complete.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Complete User Journey Tests › New User Onboarding Journey › First-time user dashboard exploration" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › New User Onboarding Journey › User discovers system capabilities" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin monitors system health and performance" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin configures system settings" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin investigates system issues" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst explores event data and trends" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst monitors data flow and processing" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Mobile User Journey › Mobile user navigates system on small screen" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user performs rapid system operations" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user tests system under load" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User recovers from system errors gracefully" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User continues working despite partial failures" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › Screen reader user navigates system" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › High contrast user views system" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="visual-regression.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-webkit" tests="13" failures="0" skipped="13" time="0" errors="0">
<testcase name="Visual Regression Tests › Dashboard screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Monitoring screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Settings screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Navigation component visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Health cards visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile responsive design visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Tablet responsive design visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Dark theme visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Loading states visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Error states visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Modal dialogs visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Form elements visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Chart components visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="api-endpoints.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="38" failures="0" skipped="38" time="0" errors="0">
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/health - Complete health status" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats - System statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with period parameter" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with service parameter" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats/services - Service-specific statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/config - System configuration" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › PUT /api/v1/config - Update configuration" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events - Recent events" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with query parameters" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with filters" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/{event_id} - Specific event" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › POST /api/v1/events/search - Search events" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats - Event statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats with period parameter" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities - Active entities" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities with limit" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/types - Event types" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › GET /health - WebSocket service health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › WebSocket connection endpoint" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Enrichment Pipeline Service Endpoints › GET /health - Enrichment service health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /health - Data retention service health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /stats - Data retention statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /health - InfluxDB health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ping - InfluxDB ping" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ready - InfluxDB ready check" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Weather API Service Endpoints › GET /health - Weather API health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › 404 error handling" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Invalid parameter handling" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Large limit parameter handling" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › JSON parsing error detection for all endpoints" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Health endpoint response time" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Stats endpoint response time" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Events endpoint response time" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Health data structure validation" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Events data structure validation" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Statistics data validation" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent health requests" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent stats requests" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="cross-service-integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › End-to-end data flow from ingestion to dashboard display" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Service dependency chain validation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Real-time data synchronization across services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › WebSocket to Admin API communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › Enrichment Pipeline to Admin API communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › InfluxDB to all services communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Event data consistency between services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Statistics consistency across service endpoints" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Health status consistency across all services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › InfluxDB failure propagation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › WebSocket service failure handling" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › Enrichment pipeline failure handling" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Configuration changes propagate across services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Service-specific configuration validation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="dashboard-data-loading.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Dashboard loads without JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Health data loads and displays correctly" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Statistics data loads without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Events data loads without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Real-time updates work without JSON errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › All API endpoints return valid JSON" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › API responses have expected structure" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Detects and reports JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Error states are displayed correctly when APIs fail" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Retry mechanism works correctly" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Dashboard loads within acceptable time limits" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Multiple rapid navigations work without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="dashboard-functionality.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Dashboard Functionality Tests › Main dashboard loads and displays all components" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Navigation works correctly between screens" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Refresh controls work correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Layout switcher changes dashboard layout" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Health cards display correct information" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Statistics chart renders and updates" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Events feed displays recent events" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Mobile responsive design works correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Theme toggle works correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Notification system displays alerts correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="error-handling-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="16" failures="0" skipped="16" time="0" errors="0">
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Detects and handles HTML responses instead of JSON" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles malformed JSON responses gracefully" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles empty JSON responses" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles non-JSON content types" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles complete API service failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles partial API service failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles slow API responses" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles timeout scenarios" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles InfluxDB connection errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles WebSocket connection errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Retry mechanism works after temporary failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Manual retry button works correctly" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Automatic retry with exponential backoff" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Error messages are user-friendly" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Loading states are shown during errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Navigation works during error states" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="frontend-ui-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="31" failures="0" skipped="31" time="0" errors="0">
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Dashboard loads completely with all components" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › System health status displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Health cards show correct information" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Real-time updates work correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Navigation menu works correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › URL routing works correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Browser back/forward navigation works" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Monitoring screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Performance metrics display correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Service monitoring shows all services" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Real-time monitoring updates work" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › General settings are editable" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Service settings display correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Notification settings work" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings save functionality" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles API errors gracefully" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Detects JSON parsing errors in dashboard" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles slow API responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles empty data responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles malformed JSON responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles HTML responses instead of JSON" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Mobile viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Tablet viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Large desktop viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Keyboard navigation works" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Screen reader compatibility" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Color contrast and visual indicators" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Page load performance" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Navigation performance" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Memory usage remains stable" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration-performance-enhanced.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › End-to-end data flow from Home Assistant simulation to dashboard" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Service dependency chain validation" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Real-time data updates across all components" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Weather enrichment integration end-to-end" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Data retention service integration" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › High-volume concurrent API requests" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Large dataset query performance" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Memory usage under continuous load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Dashboard rendering performance under load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › WebSocket connection stability under load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Service restart recovery" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Network interruption recovery" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Partial service failure handling" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Configuration change propagation" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Event data consistency across services" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Statistics accuracy and consistency" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Health status consistency across endpoints" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Integration Tests › Complete data flow from Home Assistant to dashboard" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Service dependency chain works correctly" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Real-time data updates work end-to-end" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Weather data enrichment integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Data retention service integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Admin API provides comprehensive system information" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Error propagation and handling across services" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Configuration changes propagate across services" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › WebSocket real-time updates work in dashboard" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Performance metrics integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Data export integration works end-to-end" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="monitoring-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Monitoring Screen Tests › Monitoring screen loads correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Service monitoring displays all services" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Performance metrics display correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Real-time updates work correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Service details modal opens and displays information" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Alert management displays active alerts" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Log viewer displays service logs" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Export functionality works for monitoring data" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Monitoring screen is responsive on mobile" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Error states are handled gracefully" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="13" failures="0" skipped="13" time="0" errors="0">
<testcase name="Performance Tests › Dashboard loads within acceptable time" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › API endpoints respond within acceptable time" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Statistics API performs well under load" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Events API handles pagination efficiently" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Dashboard real-time updates perform well" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Navigation between screens is fast" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Chart rendering and interaction performance" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Large datasets are handled efficiently" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Memory usage remains stable during extended use" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Concurrent user simulation performs well" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › WebSocket connection and message handling performance" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Database query performance is acceptable" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Mobile performance is acceptable" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Settings Screen Tests › Settings screen loads correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings navigation tabs work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › General settings can be modified and saved" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › API configuration settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Notification settings can be configured" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Data retention settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Security settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Configuration backup and restore works" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings validation works correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings screen is responsive on mobile" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings reset to defaults works" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="system-health.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="System Health Tests › All services are healthy and responding" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Health dashboard displays system status correctly" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Statistics endpoint returns valid data" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Recent events endpoint returns data" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › WebSocket connection establishes successfully" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Error handling works correctly when services are down" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="user-journey-complete.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Complete User Journey Tests › New User Onboarding Journey › First-time user dashboard exploration" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › New User Onboarding Journey › User discovers system capabilities" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin monitors system health and performance" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin configures system settings" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin investigates system issues" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst explores event data and trends" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst monitors data flow and processing" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Mobile User Journey › Mobile user navigates system on small screen" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user performs rapid system operations" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user tests system under load" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User recovers from system errors gracefully" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User continues working despite partial failures" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › Screen reader user navigates system" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › High contrast user views system" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="visual-regression.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-chrome" tests="13" failures="0" skipped="13" time="0" errors="0">
<testcase name="Visual Regression Tests › Dashboard screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Monitoring screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Settings screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Navigation component visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Health cards visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile responsive design visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Tablet responsive design visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Dark theme visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Loading states visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Error states visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Modal dialogs visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Form elements visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Chart components visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="api-endpoints.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="38" failures="0" skipped="38" time="0" errors="0">
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/health - Complete health status" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats - System statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with period parameter" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats with service parameter" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/stats/services - Service-specific statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/config - System configuration" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › PUT /api/v1/config - Update configuration" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events - Recent events" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with query parameters" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events with filters" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/{event_id} - Specific event" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › POST /api/v1/events/search - Search events" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats - Event statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/stats with period parameter" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities - Active entities" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/entities with limit" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Admin API Endpoints › GET /api/v1/events/types - Event types" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › GET /health - WebSocket service health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › WebSocket Ingestion Service Endpoints › WebSocket connection endpoint" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Enrichment Pipeline Service Endpoints › GET /health - Enrichment service health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /health - Data retention service health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Data Retention Service Endpoints › GET /stats - Data retention statistics" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /health - InfluxDB health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ping - InfluxDB ping" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › InfluxDB Endpoints › GET /ready - InfluxDB ready check" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Weather API Service Endpoints › GET /health - Weather API health" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › 404 error handling" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Invalid parameter handling" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › Large limit parameter handling" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Error Handling › JSON parsing error detection for all endpoints" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Health endpoint response time" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Stats endpoint response time" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Response Time Performance › Events endpoint response time" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Health data structure validation" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Events data structure validation" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › API Data Validation › Statistics data validation" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent health requests" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Endpoints Tests › Concurrent API Requests › Multiple concurrent stats requests" classname="api-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="cross-service-integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › End-to-end data flow from ingestion to dashboard display" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Service dependency chain validation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Complete Data Flow Integration › Real-time data synchronization across services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › WebSocket to Admin API communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › Enrichment Pipeline to Admin API communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Communication Patterns › InfluxDB to all services communication" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Event data consistency between services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Statistics consistency across service endpoints" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Data Consistency Across Services › Health status consistency across all services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › InfluxDB failure propagation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › WebSocket service failure handling" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Service Failure Scenarios › Enrichment pipeline failure handling" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Configuration changes propagate across services" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Cross-Service Integration Tests › Configuration Propagation › Service-specific configuration validation" classname="cross-service-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="dashboard-data-loading.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Dashboard loads without JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Health data loads and displays correctly" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Statistics data loads without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Events data loads without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Critical Data Loading Tests › Real-time updates work without JSON errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › All API endpoints return valid JSON" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › API Response Validation › API responses have expected structure" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Detects and reports JSON parsing errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Error states are displayed correctly when APIs fail" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Error State Detection › Retry mechanism works correctly" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Dashboard loads within acceptable time limits" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Data Loading Validation › Performance and Reliability › Multiple rapid navigations work without errors" classname="dashboard-data-loading.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="dashboard-functionality.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Dashboard Functionality Tests › Main dashboard loads and displays all components" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Navigation works correctly between screens" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Refresh controls work correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Layout switcher changes dashboard layout" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Health cards display correct information" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Statistics chart renders and updates" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Events feed displays recent events" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Mobile responsive design works correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Theme toggle works correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Functionality Tests › Notification system displays alerts correctly" classname="dashboard-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="error-handling-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="16" failures="0" skipped="16" time="0" errors="0">
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Detects and handles HTML responses instead of JSON" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles malformed JSON responses gracefully" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles empty JSON responses" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › JSON Parsing Error Scenarios › Handles non-JSON content types" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles complete API service failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles partial API service failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles slow API responses" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Network Error Scenarios › Handles timeout scenarios" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles InfluxDB connection errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Service-Specific Error Scenarios › Handles WebSocket connection errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Retry mechanism works after temporary failure" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Manual retry button works correctly" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › Error Recovery and Retry Mechanisms › Automatic retry with exponential backoff" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Error messages are user-friendly" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Loading states are shown during errors" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Error Handling › User Experience During Errors › Navigation works during error states" classname="error-handling-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="frontend-ui-comprehensive.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="31" failures="0" skipped="31" time="0" errors="0">
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Dashboard loads completely with all components" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › System health status displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Health cards show correct information" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Dashboard Main Screen › Real-time updates work correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Navigation menu works correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › URL routing works correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Navigation and Routing › Browser back/forward navigation works" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Monitoring screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Performance metrics display correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Service monitoring shows all services" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Monitoring Screen › Real-time monitoring updates work" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings screen loads completely" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › General settings are editable" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Service settings display correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Notification settings work" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Settings Screen › Settings save functionality" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles API errors gracefully" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Detects JSON parsing errors in dashboard" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles slow API responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles empty data responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles malformed JSON responses" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Error Handling and Edge Cases › Handles HTML responses instead of JSON" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Mobile viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Tablet viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Responsive Design › Large desktop viewport displays correctly" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Keyboard navigation works" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Screen reader compatibility" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Accessibility › Color contrast and visual indicators" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Page load performance" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Navigation performance" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Frontend UI Comprehensive Tests › Performance and Loading › Memory usage remains stable" classname="frontend-ui-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration-performance-enhanced.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › End-to-end data flow from Home Assistant simulation to dashboard" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Service dependency chain validation" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Real-time data updates across all components" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Weather enrichment integration end-to-end" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Complete Data Flow Integration › Data retention service integration" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › High-volume concurrent API requests" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Large dataset query performance" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Memory usage under continuous load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › Dashboard rendering performance under load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Performance and Load Testing › WebSocket connection stability under load" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Service restart recovery" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Network interruption recovery" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Partial service failure handling" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Error Recovery and Resilience › Configuration change propagation" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Event data consistency across services" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Statistics accuracy and consistency" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Enhanced Integration and Performance Tests › Data Integrity and Consistency › Health status consistency across endpoints" classname="integration-performance-enhanced.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Integration Tests › Complete data flow from Home Assistant to dashboard" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Service dependency chain works correctly" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Real-time data updates work end-to-end" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Weather data enrichment integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Data retention service integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Admin API provides comprehensive system information" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Error propagation and handling across services" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Configuration changes propagate across services" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › WebSocket real-time updates work in dashboard" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Performance metrics integration works" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Tests › Data export integration works end-to-end" classname="integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="monitoring-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Monitoring Screen Tests › Monitoring screen loads correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Service monitoring displays all services" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Performance metrics display correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Real-time updates work correctly" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Service details modal opens and displays information" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Alert management displays active alerts" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Log viewer displays service logs" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Export functionality works for monitoring data" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Monitoring screen is responsive on mobile" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Monitoring Screen Tests › Error states are handled gracefully" classname="monitoring-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="13" failures="0" skipped="13" time="0" errors="0">
<testcase name="Performance Tests › Dashboard loads within acceptable time" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › API endpoints respond within acceptable time" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Statistics API performs well under load" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Events API handles pagination efficiently" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Dashboard real-time updates perform well" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Navigation between screens is fast" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Chart rendering and interaction performance" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Large datasets are handled efficiently" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Memory usage remains stable during extended use" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Concurrent user simulation performs well" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › WebSocket connection and message handling performance" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Database query performance is acceptable" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Tests › Mobile performance is acceptable" classname="performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings-screen.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Settings Screen Tests › Settings screen loads correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings navigation tabs work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › General settings can be modified and saved" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › API configuration settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Notification settings can be configured" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Data retention settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Security settings work correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Configuration backup and restore works" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings validation works correctly" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings screen is responsive on mobile" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings Screen Tests › Settings reset to defaults works" classname="settings-screen.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="system-health.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="System Health Tests › All services are healthy and responding" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Health dashboard displays system status correctly" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Statistics endpoint returns valid data" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Recent events endpoint returns data" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › WebSocket connection establishes successfully" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="System Health Tests › Error handling works correctly when services are down" classname="system-health.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="user-journey-complete.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Complete User Journey Tests › New User Onboarding Journey › First-time user dashboard exploration" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › New User Onboarding Journey › User discovers system capabilities" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin monitors system health and performance" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin configures system settings" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › System Administrator Journey › Admin investigates system issues" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst explores event data and trends" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Data Analyst Journey › Analyst monitors data flow and processing" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Mobile User Journey › Mobile user navigates system on small screen" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user performs rapid system operations" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Power User Journey › Power user tests system under load" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User recovers from system errors gracefully" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Error Recovery Journey › User continues working despite partial failures" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › Screen reader user navigates system" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete User Journey Tests › Accessibility Journey › High contrast user views system" classname="user-journey-complete.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="visual-regression.spec.ts" timestamp="2025-10-20T16:58:14.439Z" hostname="docker-mobile-safari" tests="13" failures="0" skipped="13" time="0" errors="0">
<testcase name="Visual Regression Tests › Dashboard screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Monitoring screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Settings screen visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Navigation component visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Health cards visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile responsive design visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Tablet responsive design visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Dark theme visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Loading states visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Error states visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Modal dialogs visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Form elements visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Chart components visual consistency" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
</testsuites>