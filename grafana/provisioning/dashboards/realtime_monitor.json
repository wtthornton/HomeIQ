{
  "dashboard": {
    "id": null,
    "title": "âš¡ Real-Time System Monitor",
    "tags": ["realtime", "monitoring", "live"],
    "style": "dark",
    "timezone": "browser",
    "refresh": "5s",
    "time": {"from": "now-30m", "to": "now"},
    "panels": [
      {
        "id": 1,
        "title": "ðŸ”´ LIVE: Events per Second",
        "type": "stat",
        "gridPos": {"h": 4, "w": 4, "x": 0, "y": 0},
        "targets": [{
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -10s)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> count()\n  |> map(fn: (r) => ({r with _value: r._value / 10.0}))",
          "refId": "A"
        }],
        "fieldConfig": {
          "defaults": {
            "color": {"mode": "thresholds"},
            "thresholds": {
              "steps": [
                {"color": "green", "value": null},
                {"color": "yellow", "value": 5},
                {"color": "red", "value": 20}
              ]
            },
            "unit": "short",
            "displayName": "Events/sec"
          }
        }
      },
      {
        "id": 2,
        "title": "ðŸ“¡ Data Sources",
        "type": "stat",
        "gridPos": {"h": 4, "w": 4, "x": 4, "y": 0},
        "targets": [
          {
            "query": "from(bucket: \"ha_events\")\n  |> range(start: -30s)\n  |> filter(fn: (r) => r[\"source\"] == \"mqtt\")\n  |> count()\n  |> yield(name: \"MQTT\")",
            "refId": "A"
          },
          {
            "query": "from(bucket: \"ha_events\")\n  |> range(start: -30s)\n  |> filter(fn: (r) => r[\"source\"] == \"websocket\")\n  |> count()\n  |> yield(name: \"WebSocket\")",
            "refId": "B"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "color": {"mode": "palette-classic"},
            "unit": "short"
          }
        }
      },
      {
        "id": 3,
        "title": "ðŸŽ¯ Active Entities",
        "type": "stat",
        "gridPos": {"h": 4, "w": 4, "x": 8, "y": 0},
        "targets": [{
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -1m)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> group(columns: [\"entity_id\"])\n  |> distinct(column: \"entity_id\")\n  |> count()",
          "refId": "A"
        }],
        "fieldConfig": {
          "defaults": {
            "color": {"mode": "continuous-GrYlRd"},
            "unit": "short",
            "displayName": "Last Minute"
          }
        }
      },
      {
        "id": 4,
        "title": "âš¡ Live Event Stream",
        "type": "timeseries",
        "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
        "targets": [{
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -30m)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> aggregateWindow(every: 10s, fn: count, createEmpty: false)\n  |> group(columns: [\"domain\"])",
          "refId": "A"
        }],
        "fieldConfig": {
          "defaults": {
            "color": {"mode": "palette-classic"},
            "custom": {
              "drawStyle": "line",
              "lineInterpolation": "smooth",
              "fillOpacity": 20
            }
          }
        }
      },
      {
        "id": 5,
        "title": "ðŸ”¥ Hot Entities (Live)",
        "type": "table",
        "gridPos": {"h": 8, "w": 6, "x": 0, "y": 4},
        "targets": [{
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -5m)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> group(columns: [\"entity_id\", \"domain\"])\n  |> count()\n  |> sort(columns: [\"_value\"], desc: true)\n  |> limit(n: 15)",
          "refId": "A"
        }],
        "fieldConfig": {
          "defaults": {
            "custom": {
              "displayMode": "color-background"
            }
          }
        }
      },
      {
        "id": 6,
        "title": "ðŸ“Š Domain Activity (Real-time)",
        "type": "bargauge",
        "gridPos": {"h": 8, "w": 6, "x": 6, "y": 4},
        "targets": [{
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -1m)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> group(columns: [\"domain\"])\n  |> count()",
          "refId": "A"
        }],
        "fieldConfig": {
          "defaults": {
            "color": {"mode": "continuous-BlPu"},
            "unit": "short"
          }
        },
        "options": {
          "orientation": "horizontal",
          "displayMode": "gradient"
        }
      },
      {
        "id": 7,
        "title": "ðŸŒŠ Event Flow Visualization",
        "type": "timeseries",
        "gridPos": {"h": 8, "w": 24, "x": 0, "y": 12},
        "targets": [
          {
            "query": "from(bucket: \"ha_events\")\n  |> range(start: -30m)\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> aggregateWindow(every: 5s, fn: count, createEmpty: false)\n  |> yield(name: \"Sensors\")",
            "refId": "A"
          },
          {
            "query": "from(bucket: \"ha_events\")\n  |> range(start: -30m)\n  |> filter(fn: (r) => r[\"domain\"] == \"binary_sensor\")\n  |> aggregateWindow(every: 5s, fn: count, createEmpty: false)\n  |> yield(name: \"Binary Sensors\")",
            "refId": "B"
          },
          {
            "query": "from(bucket: \"ha_events\")\n  |> range(start: -30m)\n  |> filter(fn: (r) => r[\"domain\"] == \"switch\")\n  |> aggregateWindow(every: 5s, fn: count, createEmpty: false)\n  |> yield(name: \"Switches\")",
            "refId": "C"
          },
          {
            "query": "from(bucket: \"ha_events\")\n  |> range(start: -30m)\n  |> filter(fn: (r) => r[\"domain\"] == \"light\")\n  |> aggregateWindow(every: 5s, fn: count, createEmpty: false)\n  |> yield(name: \"Lights\")",
            "refId": "D"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "color": {"mode": "palette-classic"},
            "custom": {
              "drawStyle": "line",
              "lineInterpolation": "smooth",
              "fillOpacity": 15,
              "stacking": {"mode": "normal"}
            }
          }
        }
      },
      {
        "id": 8,
        "title": "ðŸš¨ Live Alerts & Changes",
        "type": "logs",
        "gridPos": {"h": 6, "w": 12, "x": 0, "y": 20},
        "targets": [{
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -10m)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> filter(fn: (r) => r[\"event_type\"] == \"state_changed\" or r[\"event_type\"] == \"automation_triggered\")\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 100)",
          "refId": "A"
        }]
      },
      {
        "id": 9,
        "title": "ðŸ“ˆ Performance Metrics",
        "type": "timeseries",
        "gridPos": {"h": 6, "w": 12, "x": 12, "y": 20},
        "targets": [{
          "query": "from(bucket: \"ha_events\")\n  |> range(start: -30m)\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /ha_/)\n  |> aggregateWindow(every: 30s, fn: count, createEmpty: false)\n  |> derivative(unit: 1s, nonNegative: true)",
          "refId": "A"
        }],
        "fieldConfig": {
          "defaults": {
            "color": {"mode": "continuous-GrYlRd"},
            "unit": "short",
            "displayName": "Events/sec",
            "custom": {
              "drawStyle": "line",
              "lineInterpolation": "smooth",
              "fillOpacity": 30
            }
          }
        }
      }
    ]
  }
}
